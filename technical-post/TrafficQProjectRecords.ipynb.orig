{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# All Roads Lead to Kdb: the technical counterpart\n",
    "\n",
    "This post serves as a follow-up to our prior article, [All Roads Lead to Kdb](https://www.habla.dev/blog/2023/07/31/all-roads-lead-to-pykx.html), where we introduced the utility of the PyKX library from the perspective of Emma Monad, the CTO of a large fictional company known as Mad Flow. In addition to this high-level perspective, the focus of this post is on Pythonist programmers who are eager to explore the technical intricacies that were left unexplained in the aforementioned article. Consequently, the post will provide them with a highly detailed, step-by-step example of how to migrate an existing Python codebase into PyKX. Similarly to the outcomes presented in the post [Accelerating Python Workflows using PyKX](https://kx.com/blog/accelerating-python-workflows-using-pykx/), which we highly recommend reading, we will observe a significant performance advantage of the resulting PyKX code compared to the initial Pandas implementation. More references are available in the bibliography at the end of the post.\n",
    "\n",
    "The structure of the post will be as follows:\n",
    "\n",
    "* [**The Use Case**](#t2): We will begin by explaining the traffic improvement use case itself, encompassing its objectives, data sources, and anticipated outcomes. This section will also include references to the necessary data sources required to execute all the code provided in this notebook.\n",
    "* [**PyKX migration**](#t3): Subsequently, we will illustrate the process of delegating resource-intensive tasks to kdb+/q using PyKX, all while staying within the Python environment! This kind of PyKX-boosted Pythonic version is probably the fastest way to begin harnessing the capabilities of the kdb+/q environment.\n",
    "* [**pykx.q migration**](#t4): Lastly, we will delve into the process of transitioning the code to pure kdb+/q, while continuing to utilize PyKX to retain the Pythonic code you wish to preserve. This kdb+/q version enhanced by PyKX is presented for those interested in a more extensive adoption of kdb+/q.\n",
    "\n",
    "The initial section regarding the use case is independent of programming languages and is primarily included for reference purposes. If you're eager to delve directly into the code and begin learning how to migrate pure Pandas-based Python code into PyKX, you can proceed to the [second section](#t3) now and revisit the [first section](#t2) as necessary.\n",
    "    \n",
    "## Use Case<a class=\"anchor\" id=\"t2\"></a>\n",
    "\n",
    "With the aim of predicting traffic congestion in the presence of rain, Mad Flow dedicated significant effort to preparing and integrating weather and traffic data into an LSTM model. This endeavor aligned with other [studies](https://www.mdpi.com/1424-8220/20/13/3749) that sought to forecast traffic patterns using LSTM models based on air pollution.  Just like findings from studies in cities like such as [Manchester](https://pure.manchester.ac.uk/ws/portalfiles/portal/72721911/DEXA_Camera_8_pages.pdf), [Shenzhen](https://ieeexplore.ieee.org/document/8964560) and [Belgrade](https://www.safetylit.org/citations/index.php?fuseaction=citations.viewdetails&citationIds[]=citjournalarticle_716898_14), our results project a weekday traffic volume increase of 5-15% during peak hours in the presence of rain.\n",
    "\n",
    "Like in most projects related to smart cities, the used data is notable diverse, so it needed a lot of preparatory work. The following sections will detail the data sources, the cleansing and interpretation processes, as well as the used model.\n",
    "\n",
    "### Data sources <a class=\"anchor\" id=\"t21\"></a>\n",
    "\n",
    "The [Madrid City Council](https://datos.madrid.es/portal/site/egob) provides weather and traffic data, including both real-time and historical records. For the purpose of model training, only the historical data is pertinent. These datasets, formatted as CSV files, are categorized by months spanning from the year 2018 to the present.\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "    <b> üîç You can access the different datasets required to run this notebook from the following links: \n",
    "        <ul>\n",
    "            <li> <a href=\"https://datos.madrid.es/egob/catalogo/300352-141-meteorologicos-horarios.csv\">Weather data</a>\n",
    "            <li> <a href=\"https://datos.madrid.es/egob/catalogo/300360-1-meteorologicos-estaciones.csv\">Weather stations</a>\n",
    "            <li> <a href=\"https://datos.madrid.es/egob/catalogo/208627-115-transporte-ptomedida-historico.zip\">Traffic data</a>\n",
    "            <li> <a href=\"https://datos.madrid.es/egob/catalogo/202468-170-intensidad-trafico.csv\">Traffic stations</a>\n",
    "        </ul>\n",
    "    </b>\n",
    "</div>\n",
    "\n",
    "**Traffic data**\n",
    "\n",
    "The traffic sensors are strategically positioned at traffic lights throughout the city of Madrid. The collected data gather together diverse measurements of road conditions, including speed and traffic volume. All of these metrics are encapsulated in the `load` metric,  quantified in percentage terms to denote levels of congestion. The format of the [traffic table](https://datos.madrid.es/egob/catalogo/208627-115-transporte-ptomedida-historico.zip) is presented as follows: \n",
    "\n",
    "|    |   traffic_station | element type   |   intensity |   ocupation |   load |   vmed | error   |   integration period | date                |\n",
    "|---:|------------------:|:------------|-------------:|------------:|-------:|-------:|:--------|----------------------:|:--------------------|\n",
    "|  0 |              1001 | M30         |         3240 |           9 |      0 |     59 | N       |                     5 | 2022-12-01 00:00:00 |\n",
    "|  1 |              1001 | M30         |         3240 |           9 |      0 |     59 | N       |                     5 | 2022-12-01 00:15:00 |\n",
    "|  2 |              1001 | M30         |          300 |           1 |      0 |     66 | N       |                     5 | 2022-12-01 00:30:00 |\n",
    "\n",
    "This table amass information from various traffic stations, detailing elements such as traffic intensity, occupancy, congestion load, and other relevant data, all correlated with specific dates and times.\n",
    "\n",
    "The table also includes a column for the date and another column that identifies the sensor. This identification will be used to establish a link with its corresponding coordinates by utilizing the subsequent [traffic stations table](https://datos.madrid.es/egob/catalogo/202468-170-intensidad-trafico.csv):\n",
    "\n",
    "|    | element type   |   district |   id | code | name | utm_x |  utm_y | Longitude | Latitude |\n",
    "|---:|:--------------|-------------:|-------:|:-------------|:------------------------------------------------------------------|----------:|------------:|------------:|-----------:|\n",
    "|  0 | \"URB\"         |            4 |   3840 | \"01001\"      | \"Jose Ortega y Gasset E-O - P¬∫ Castellana-Serrano\"                |    441615 | 4.47577e+06 |    -3.68832 |    40.4305 |\n",
    "|  1 | \"URB\"         |            4 |   3841 | \"01002\"      | \"Jose Ortega y Gasset O-E - Serrano-P¬∫ Castellana\"                |    441706 | 4.47577e+06 |    -3.68726 |    40.4305 |\n",
    "|  2 | \"URB\"         |            1 |   3842 | \"01003\"      | \"P¬∫ Recoletos N-S - Almirante-Prim\"                               |    441319 | 4.47484e+06 |    -3.69173 |    40.4221 |\n",
    "\n",
    "\n",
    "**Weather data**\n",
    "\n",
    "The table below provides a snapshot of the type of information available in the [weather dataset](https://datos.madrid.es/egob/catalogo/300352-141-meteorologicos-horarios.csv):\n",
    "\n",
    "|    |   weather_station |   magnitude |   year |   month |   day |    H01 | V01   | ...|\n",
    "|---:|------------------:|-----------:|-------:|--------:|------:|-------:|------:|:------|\n",
    "|  0 |               108 |         81 |   2022 |      12 |    22 |  270   | N     | ...|\n",
    "|  1 |               108 |         82 |   2022 |      12 |    22 |    9   | N     |...|\n",
    "|  2 |               108 |         83 |   2022 |      12 |    22 |   94.7 | N     |...|\n",
    "|  3 |               108 |         86 |   2022 |      12 |    22 | 1031   | N     |...|\n",
    "|  4 |               108 |         87 |   2022 |      12 |    22 |    2   | N     |...|\n",
    "\n",
    "This dataset contains hourly meteorological observations, including temperature, humidity, wind speed, and precipitation measurements.\n",
    "\n",
    "Each row documents various details about a specific meteorological station:\n",
    "\n",
    "* The 'magnitude' field denotes the type of meteorological data captured in the corresponding row (e.g., 81 - wind, 82 - direction, ..., 89 - rainfall).\n",
    "* In the 'H01' and 'V01' columns, the value for the data type specified in the 'magnitude' column is provided, along with its validity status, respectively.\n",
    "* The 'year', 'month', and 'day' columns indicate the timestamp of the measurement recording.\n",
    "\n",
    "Furthermore, we will require the geographical coordinates of the various stations, which are available in a distinct [table](https://datos.madrid.es/egob/catalogo/300360-1-meteorologicos-estaciones.csv) provided by the Madrid City Council.\n",
    "\n",
    "|    |   weather_station |   Longitude |   Latitude |\n",
    "|---:|------------------:|------------:|-----------:|\n",
    "|  0 |                 4 |    -3.71226 |    40.4239 |\n",
    "|  1 |                 8 |    -3.68232 |    40.4216 |\n",
    "|  2 |                16 |    -3.63924 |    40.44   |\n",
    "|  3 |                18 |    -3.73184 |    40.3948 |\n",
    "|  4 |               108 |    -3.717881|    40.47663|\n",
    "\n",
    "\n",
    "    \n",
    "### Data Cleansing  <a class=\"anchor\" id=\"t22\"></a>\n",
    "\n",
    "Upon loading the data, the subsequent task involved its preparation for analysis and modeling.  The eventual consolidation of this cleaned data into a unified table will occur during a subsequent phase.\n",
    "\n",
    "After loading the data, the next step was to get it ready for analysis and modeling. Given the diverse nature of the datasets, the process of data cleansing will be conducted individually for each dataset. We'll bring all this cleaned data together into a unified table in a later phase.\n",
    "\n",
    "#### Traffic Data\n",
    "\n",
    "The process employed to clean the traffic dataset involves the following steps:\n",
    "\n",
    "1. Initially, values characterized by measurement errors are excluded from consideration. The documentation designates these values using the symbol \"N\".\n",
    "\n",
    "2. Subsequently, solely the load measurements, which constitute the focus of our analysis, are retained.\n",
    "\n",
    "3. The data is then grouped based on each date and station, subsequently computing the average load value for each group:\n",
    "\n",
    "| date                |   traffic_station |   traffic_load |\n",
    "|---------------------|-------------------|----------------|\n",
    "| 2022-12-01 00:00:00 |              1001 |              0 |\n",
    "| 2022-12-01 00:00:00 |              1002 |              0 |\n",
    "| 2022-12-01 00:00:00 |              1003 |              0 |\n",
    "\n",
    "\n",
    "#### Weather Data\n",
    "\n",
    "Concerning the weather dataset, the procedures undertaken were as follows:\n",
    "\n",
    "1. In the weather dataset, the date is split into separate columns for day, month, and year. However, in the traffic dataset, this information is combined. So, we merged the columns to create a single 'date' column with the format:\" ```day-month-year```. \n",
    "\n",
    "2. Additionally, given that each individual row contains all 24 daily measurements taken at a weather station, along with their respective magnitudes, we need a transformation where each hourly measurement value and its corresponding validity status are discrete entries within separate rows. This presents an opportunity to remove any measurements that are marked as invalid.\n",
    "\n",
    "|       | hour            |   value |\n",
    "|------:|:----------------|--------:|\n",
    "|     0 | 0 days 00:00:00 |    7.1  |\n",
    "|     1 | 0 days 00:00:00 |    6.8  |\n",
    "|     2 | 0 days 00:00:00 |    2.8  |\n",
    "|     3 | 0 days 00:00:00 |    5.6  |\n",
    "\n",
    "3. To standardize the time measurement format and align it with the traffic table, we merge the date with the time. As a result, the updated date format becomes:```date-month-year hour:minute:second```\n",
    "\n",
    "4. Lastly, we restructure the diverse types of measurements into distinct columns, enhancing the organizational coherence of the dataset:\n",
    "\n",
    "\n",
    "|      | date                |   weather_station |   direction |   humidity |   pressure |   rainfall |   solar |   temperature |   wind |\n",
    "|-----:|:--------------------|------------------:|------------:|-----------:|-----------:|-----------:|--------:|--------------:|-------:|\n",
    "|    0 | 2022-12-01 00:00:00 |                 4 |           0 |          0 |          0 |        0   |       0 |           7.1 |   0    |\n",
    "|    1 | 2022-12-01 00:00:00 |                 8 |           0 |         67 |          0 |        0   |       0 |           9.4 |   0    |\n",
    "|    2 | 2022-12-01 00:00:00 |                16 |           0 |         73 |          0 |        0   |       0 |           8.9 |   0    |\n",
    "\n",
    "\n",
    "#### Location Data\n",
    "\n",
    "To facilitate the integration of the aforementioned tables, it is imperative to establish a correspondence between the traffic sensors and the weather stations. This objective can be accomplished through the utilization of a distance matrix, which aids in identifying the nearest pairs encompassing both station types. While a direct measurement of this distance employing coordinates is feasible, we have opted for the utilization of the [Haversine distance](https://en.wikipedia.org/wiki/Haversine_formula). This distance calculation method computes the distance in meters between pairs of coordinates, furnishing a more lucid representation of distances.\n",
    "\n",
    "```\n",
    "<CHATGPT ALTERNATIVE BEFORE PARAGRAPH>\n",
    "To make it easier to combine the tables we mentioned, we need to connect the traffic sensors with the weather stations. To do this, we can use a distance matrix that helps us find the closest pairs of both types of stations. Instead of directly measuring the distance using coordinates, we decided to go with the  [Haversine distance](https://en.wikipedia.org/wiki/Haversine_formula). This method calculates the distance in meters between coordinate pairs, which gives a clearer idea of the distances.\n",
    "```\n",
    "\n",
    "This visualization is best shown using a heatmap, where the distances are displayed on a range from 0 to 20 kilometers:\n",
    "\n",
    "<figure>\n",
    "<img src=\"image_source/heatmap3.png\">\n",
    "<figcaption style = \"text-align: center\"> <b>Figure 1:</b> Heatmap of distances in km between weather and traffic stations </figcaption>\n",
    "</figure>\n",
    " \n",
    "If we look at the shortest distances between each type of station, we end up with a mapping between these two tables:\n",
    "\n",
    "|    |   traffic_station |   weather_station |\n",
    "|---:|------------------:|------------------:|\n",
    "|  0 |              3840 |               109 |\n",
    "|  1 |              3841 |               109 |\n",
    "|  2 |              3842 |                 8 |\n",
    "\n",
    "#### The Final Table <a class=\"anchor\" id=\"t23\"></a>\n",
    "\n",
    "After we've done all the setup for the three tables - weather, traffic, and distance - we can now put them together. Because the weather table has data every hour, while the traffic data is available every 15 minutes, we'll combine them using an 'asof' join method. Then, we'll add time and day-of-the-week details to the dataset, which will help us study how these factors are connected to traffic congestion.\n",
    "\n",
    "|    | date                |   traffic_station |   load |   Distance |   Closest |   weather_station |   direction |   humidity |   pressure |   rainfall |   solar |   temperature |   wind |   weekday |   hour |\n",
    "|---:|:--------------------|------------------:|-------:|-----------:|----------:|------------------:|------------:|-----------:|-----------:|-----------:|--------:|--------------:|-------:|----------:|-------:|\n",
    "|  0 | 2022-12-01 00:00:00 |              1001 |      0 |         15 |         1 |                 8 |           0 |         67 |          0 |          0 |       0 |           9.4 |      0 |         3 |      0 |\n",
    "|  1 | 2022-12-01 00:00:00 |              1002 |      0 |         15 |         1 |                 8 |           0 |         67 |          0 |          0 |       0 |           9.4 |      0 |         3 |      0 |\n",
    "|  2 | 2022-12-01 00:00:00 |              1003 |      0 |         14 |         1 |                 8 |           0 |         67 |          0 |          0 |       0 |           9.4 |      0 |         3 |      0 |\n",
    "|  3 | 2022-12-01 00:00:00 |              1006 |      0 |         15 |         1 |                 8 |           0 |         67 |          0 |          0 |       0 |           9.4 |      0 |         3 |      0 |\n",
    "|  4 | 2022-12-01 00:00:00 |              1009 |      0 |         14 |         0 |                 4 |           0 |          0 |          0 |          0 |       0 |           7.1 |      0 |         3 |      0 |\n",
    "    \n",
    "\n",
    "### Data interpretation <a class=\"anchor\" id=\"t24\"></a>\n",
    "\n",
    "Traffic patterns exhibit a pronounced dependency on time. To dig deeper into the data, a filtering process will be applied to extract instances of peak traffic. This focused dataset will help us really get a better grip on traffic dynamics. \n",
    "\n",
    "The next figures illustrates the outstanding seasonality within the dataset:\n",
    "<table>\n",
    "    <tr>\n",
    "    <td style='text-align:center;'>\n",
    "<figure>\n",
    "<img src=\"image_source/loadperhour.png\">\n",
    "<figcaption style = \"text-align: center\">   <b>Figure 2:</b> Load per Hour </figcaption>\n",
    "</figure>\n",
    " </td>\n",
    "    <td>\n",
    "<figure>\n",
    "<img src=\"image_source/loadperweekday.png\">\n",
    "<figcaption style = \"text-align: center\">   <b>Figure 3:</b> Load per Weekday </figcaption>\n",
    "</figure>\n",
    "            </td>\n",
    "    </tr>\n",
    "</table>\n",
    "\n",
    "It's clear that weekdays have more traffic compared to holidays. Likewise, during the daytime, there's a higher traffic flow than at nighttime.\n",
    "\n",
    "Concerning the relationship between Rainfall and Load, preliminary observations indicate a limited occurrence of rainy days within our dataset:\n",
    "\n",
    "|       |       rainfall |\n",
    "|:------|---------------:|\n",
    "| count | 841068         |\n",
    "| mean  |      0.0130932 |\n",
    "| std   |      0.194232  |\n",
    "| min   |      0         |\n",
    "| 50%   |      0         |\n",
    "| 90%   |      0         |\n",
    "| 99.9% |      2.9       |\n",
    "| max   |     10.9       |\n",
    "\n",
    "\n",
    "After looking closely at the percentiles of the precipitation column, it's clear that recorded instances of rainfall are quite scarce. To address this limitation, the measurements were divided into distinct categories based on the intensity of the rainfall. This led to a separate analysis for datasets involving heavy rain, moderate rain, and times when there was no rain. This analysis was done hourly, to minimize the impact of time on traffic patterns.\n",
    "\n",
    "The results of this analysis show that on average, traffic congestion increases by around 5% to 14% during rainy hours. This consistently matches the findings discussed in the [Use Case](#t2) section.\n",
    "\n",
    "<figure>\n",
    "<img src=\"image_source/rainfall.png\">\n",
    "<figcaption style = \"text-align: center\"> <b>Figure 4:</b> The average traffic load per hour for measurements categorized as heavy rain (blue), moderate rain (brown), and no rain (green):</figcaption>\n",
    "</figure>\n",
    "\n",
    "To confirm the statistical importance of the differences between these groups, we conducted an analysis of variance (ANOVA) test. Notably, the ANOVA results strongly suggest significant variations in load levels among the different rain intensity categories for all hours. For example, let's take a look at the results for hour 12.\n",
    "\n",
    "|             |          sum_sq |    df |        F |       PR(>F) |\n",
    "|:------------|----------------:|------:|---------:|-------------:|\n",
    "| C(rainfall) | 37650.7         |     6 |  20.1144 |   1.3346e-23 |\n",
    "| Residual    |     8.01363e+06 | 25687 | nan      | nan          |\n",
    "\n",
    "We chose to include rainfall as a factor in the model. However, the other meteorological conditions didn't show similarly clear results, so we decided to leave them out of the model.\n",
    "\n",
    "### The Model <a class=\"anchor\" id=\"t25\"></a>\n",
    "\n",
    "For the purpose of performance evaluation, a preliminary model was developed employing a basic Long Short-Term Memory (LSTM) architecture with a memory span of 5 steps. The model's objective is to forecast the load at a specific traffic station. The model input encompasses historical load data, rainfall measurements, as well as the hour and day of the week.\n",
    "\n",
    "Preliminary results derived from a single station exhibit promising outcomes, as demonstrated in Figure 6. In this figure, we compare the actual traffic load with the predictions made by the LSTM model. Furthermore, an analysis of the training and validation loss curves (Figure 5) indicates that the model is not experiencing issues related to overfitting or underfitting.\n",
    "\n",
    "\n",
    "<table> <a class=\"anchor\" id=\"Image61\"></a>\n",
    "    <tr>\n",
    "    <td style='text-align:center;'>\n",
    "<figure>\n",
    "<img src=\"image_source/loss_graph_p.png\">\n",
    "<figcaption style = \"text-align: center\">   <b>Figure 5:</b> Train vs Validation loss curves plot  </figcaption>\n",
    "</figure>\n",
    " </td>\n",
    "    <td>\n",
    "<figure>\n",
    "<img src=\"image_source/test_python.png\">\n",
    "<figcaption style = \"text-align: center\">   <b>Figure 6:</b> Traffic Forecasting for a traffic station </figcaption>\n",
    "</figure>\n",
    "            </td>\n",
    "    </tr>\n",
    "</table>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PyKX migration <a class=\"anchor\" id=\"t3\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Despite the promising forecasting results yielded by the LSTM model, certain considerations arose concerning the efficiency of the Python code employed for project implementation. After profiling the entirity of the process, we found 4 key areas in which the code was behaving worse than expected:\n",
    "\n",
    "|        ¬† ¬† ¬† ¬† ¬† | Pandas Time   ¬† ¬†|\n",
    "| ---------------- | ---------------- |\n",
    "| Cleaning Weather | 247 ms ¬± 10.4 ms |\n",
    "| Cleaning Traffic | 25.5 s ¬± 1.29 s ¬†|\n",
    "| Join Final Table | 7.1 s ¬± 168 ms ¬† |\n",
    "| Model Ingestion Preprocess |  3.2 s ¬± 54.2 ms  |\n",
    "\n",
    "At this point, a fundamental decision had to be made regarding the migration strategy. Let's see several alternatives with their positive and negative points, commencing with the .pd() method. This method facilitates the conversion of a PyPX table object into a Pandas dataframe. \n",
    "\n",
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: Use <a href=\"https://code.kx.com/pykx/1.6/user-guide/fundamentals/creating.html\">Python/Q Transform</a> \n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> Objects from q can be converted to Pandas with <code>.pd()</code>, to PyArrow with <code>.pa()</code>, to Numpy with <code>.np()</code> and to Python with <code>.py()</code> methods. This flexibility empowers Python developers, especially those new to PyKX, to seamlessly tap into the capabilities of kdb+ databases while acquainting themselves with q. These transformations can be very slow; that's why, as we mentioned at the beginning, they are not recommended. However, if we activate the <code>PYKX_ALLOCATOR</code> flag, we can speed up the transfers of vectors from the q memory space to Numpy. Furthermore, the <code>toq(pyObject)</code> function facilitates the process of reverting back to q objects.</p>\n",
    "</div>\n",
    "</div>\n",
    "\n",
    "This method serves as an excellent starting point for the migration process. We can simply transfer our q objects to Python and leverage our existing code. This approach ensures that our data remains stored within the kdb environment, thus benefitting from its rapid and scalable database capabilities. It is important to note, however, that the processing potency inherent to q will not be retained.\n",
    "\n",
    "An alternative approach could involve identifying the specific points where pandas experiences the greatest strain and subsequently transferring those segments to q using pykx. In this scenario, we could use the pre-existing q objects, migrate intensive operations to pykx, and move them to the Python ecosystem for a final processing. This strategy could be particularly effective if we can clearly demarcate the heavy segments of processing from the less complex ones. However, this is not always the case, and consequently, the process could entail multiple conversions between Python and q. \n",
    "\n",
    "Moreover, the [documentation recommends](https://code.kx.com/pykx/1.6/user-guide/advanced/performance.html), we should avoid these kinds of conversions between the realms of Python and Q whenever possible, and for good reasons. To test how much time is lost in these conversions, we moved the weather and traffic tables, as well as a 12-million-row table from a later stage in the process, to Python using the `.pd` method. The results are as follows:\n",
    "\n",
    "|               | Translation time |\n",
    "| ------------- | ---------------- |\n",
    "| Traffic table | 2.78 s ¬± 84.9 ms |\n",
    "| Weather table | 24.6 ms ¬± 821 ¬µs |\n",
    "| Final table   | 1 minute 33 s    |\n",
    "\n",
    "If we needed to move those tables just once then it might have been viable, but since mixing and matching libraries would involve doing this kind of operation several times, we couldn't really afford it, especially with the final table (with 12 million of entries) since it took more than double to move it than it took the whole process to execute. A promising alternative to the `.pd()` method is the PykX implementation of the Pandas API. However, as we will explore later, even this had to be discarded for our particular case. The last alternative is a complete migration to PyKX and in our case this became imperative. But, as we will see, with a little knowledge of q this will not be so painful.\n",
    "\n",
    "Let's get started!\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "    <b> üîç You can find on Github the <a href=\"https://github.com/hablapps/AllRoadsLeadToPyKX/blob/Python-Version-Pre/AllRoadsLeadToPyKX.md\">Original Python Project</a> that will be migrated into PyKX. </b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First of all we need to install and import PyKX:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pykx in /home/jserrano/anaconda3/lib/python3.9/site-packages (1.6.0)\n",
      "Requirement already satisfied: pandas~=1.2 in /home/jserrano/anaconda3/lib/python3.9/site-packages (from pykx) (1.5.3)\n",
      "Requirement already satisfied: pytz~=2022.1 in /home/jserrano/anaconda3/lib/python3.9/site-packages (from pykx) (2022.7)\n",
      "Requirement already satisfied: numpy~=1.22 in /home/jserrano/anaconda3/lib/python3.9/site-packages (from pykx) (1.23.5)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /home/jserrano/anaconda3/lib/python3.9/site-packages (from pandas~=1.2->pykx) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in /home/jserrano/anaconda3/lib/python3.9/site-packages (from python-dateutil>=2.8.1->pandas~=1.2->pykx) (1.16.0)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.1.2\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m23.2.1\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install pykx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pykx as kx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "<b> üîç A license is required to use some of the following features. You can find more information in the <a href=\"https://code.kx.com/pykx/1.6/getting-started/installing.html\">\n",
    "    PyKX installation documentation</a>. </b>\n",
    "</div> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Datasets <a class=\"anchor\" id=\"t31\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before continuing, be sure to download the [datasets](#t21) required for running the next pieces of code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Traffic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The preprocessing of the traffic table was one of the most critical parts in terms of time. Later on, we will showcase the improvement in execution time compared to our pure Pandas implementation.\n",
    "\n",
    "The data loading will be executed employing the utilities facilitated by PyKX:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "traffic = kx.q.read.csv('../12-2022.csv', types=\"IPSIIIISI\", delimiter=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: <a href=\"https://code.kx.com/pykx/1.6/api/read.html\">PyKX Read/Write Utils </a>\n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> PyKX provides an array of functions designed to facilitate data loading and writing tasks. These functions encompass the capability to handle diverse file types, spanning both general formats and those specific to the q language. Notably, the q-specific functionalities enable seamless transfer of tables between the q context and the Python context, offering a bidirectional exchange of data. </p>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\">Specifically, the parameters of the read.csv function adhere to conventional standards. The file's URL and delimiter are specified. It is important to emphasize the types parameter, which expects the q <a href=\"https://code.kx.com/q/basics/datatypes/\">types</a> associated with each column. \n",
    "</p>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id   fecha                         tipo_elem intensidad ocupacion carga vmed ..\n",
      "-----------------------------------------------------------------------------..\n",
      "1001 2022.12.01D00:00:00.000000000 M30       3240       9         0     59   ..\n",
      "1001 2022.12.01D00:15:00.000000000 M30       3240       9         0     59   ..\n",
      "1001 2022.12.01D00:30:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D00:45:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D01:00:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D01:15:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D01:30:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D01:45:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D02:00:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D02:15:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D02:30:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D02:45:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D03:00:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D03:15:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D03:30:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D03:45:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D04:00:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D04:15:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D04:30:00.000000000 M30       300        1         0     66   ..\n",
      "1001 2022.12.01D04:45:00.000000000 M30       300        1         0     66   ..\n",
      "..\n"
     ]
    }
   ],
   "source": [
    "print(traffic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a result of this process, our table is now a PyKX object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pykx.wrappers.Table"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(traffic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's examine the initial few rows of this table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id   fecha                         tipo_elem intensidad ocupacion carga vmed ..\n",
      "-----------------------------------------------------------------------------..\n",
      "1001 2022.12.01D00:00:00.000000000 M30       3240       9         0     59   ..\n",
      "1001 2022.12.01D00:15:00.000000000 M30       3240       9         0     59   ..\n",
      "1001 2022.12.01D00:30:00.000000000 M30       300        1         0     66   ..\n"
     ]
    }
   ],
   "source": [
    "print(traffic[:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: <a href=\"https://code.kx.com/pykx/1.6/user-guide/fundamentals/indexing.html\">Use pythonic indexing </a>\n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> Accessing data within PyKX objects, be it lists or tables, follows a methodology analogous to that of Numpy or Pandas. This facilitates the indexing of PyKX objects without necessitating the explicit utilization of q functions. Furthermore, the capacity to index by columns is an additional convenience offered by this approach.</p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> print(weather[\"H01\"][:3]) \n",
    "<div style=\"color:#808080;display:inline;\"> 270 9 94.7 </div></code><br>   \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have the `kx.q.qsql` interface integrated in PyKX, which allows us to query into q tables concisely."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: <a href=\"https://code.kx.com/pykx/1.6/api/read.html\">qSQL</a> and  <a href=\"https://code.kx.com/pykx/1.6/api/read.html\">SQL</a> querys\n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> PyKX allows you to use qSQL queries using API functions. This includes <code>select</code>, <code>exec</code>, <code>update</code> and <code>delete</code> functions, which share some common characteristics, mainly with the arguments they receive. The first three share roughly this function call structure:\n",
    "</p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> kx.q.qsql.{function}({tab}, columns=..., where=..., by=...) </code>\n",
    "<br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\">The <code>columns</code> argument expects either a list of strings or a dictionary where the key is the column name and the value is the actual value you want in this column if let's say you want to apply a function to it. Let's see an example:</p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> print(kx.q.qsql.select(weather, {\"magnitude\": \"count distinct magnitude\"}, by=[\"weather_station\"])[:3])\n",
    "<br><div style=\"color:#808080;display:inline;\"> weather_station| magnitude\n",
    " ---------------| ---------\n",
    " 4 ¬† ¬† ¬† ¬† ¬† ¬† ¬†| 1 ¬† ¬† ¬† ¬†\n",
    " 8 ¬† ¬† ¬† ¬† ¬† ¬† ¬†| 2 ¬† ¬† ¬† ¬†\n",
    " 16 ¬† ¬† ¬† ¬† ¬† ¬† | 2 ¬† ¬† \n",
    "</div>¬† ¬† ¬† ¬† ¬†\n",
    "</code>\n",
    "<br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> But if you are more familiarized with the q environment it is also possible to use q functions. This approach reduces the verbosity of our functions compared to the equivalent in Python.\n",
    "</p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> print(kx.q(\"{select count distinct magnitude by weather_station from x}\", weather)[:3])\n",
    "<br> <div style=\"color:#808080;display:inline;\">weather_station| magnitude\n",
    " ---------------| ---------\n",
    " 4 ¬† ¬† ¬† ¬† ¬† ¬† ¬†| 1 ¬† ¬† ¬† ¬†\n",
    " 8 ¬† ¬† ¬† ¬† ¬† ¬† ¬†| 2 ¬† ¬† ¬† ¬†\n",
    " 16 ¬† ¬† ¬† ¬† ¬† ¬† | 2 \n",
    "</div> ¬† ¬†\n",
    "</code>\n",
    "<br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> PyKX lets you use ANSI SQL queries too! </p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> print(kx.q.sql(\"SELECT weather_station, COUNT(DISTINCT(magnitude)) FROM &#36 1 GROUP BY weather_station\", weather)[:3])\n",
    "<br> <div style=\"color:#808080;display:inline;\">weather_station magnitude\n",
    " -------------------------\n",
    " 4 ¬† ¬† ¬† ¬† ¬† ¬† ¬† 1 ¬† ¬† ¬† ¬†\n",
    " 8 ¬† ¬† ¬† ¬† ¬† ¬† ¬† 2 ¬† ¬† ¬† ¬†\n",
    " 16 ¬† ¬† ¬† ¬† ¬† ¬† ¬†2 ¬† ¬† ¬† ¬†¬† ¬† ¬†\n",
    "</div></code>\n",
    "<br>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To preprocess the traffic table our objective is to ascertain the average load based on date and season, while eliminating measurement errors. The prowess of qSQL enables us to accomplish this feat through a singular query:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "traffic = kx.q.qsql.select(traffic,\n",
    "                         columns = {'traffic_load': 'avg carga'},\n",
    "                         by = {\"date\":'fecha', \"traffic_station\": 'id'}, \n",
    "                         where = \"error=`N\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
<<<<<<< HEAD
   "id": "1cc16709",
=======
>>>>>>> c0647b344d5195f296497724203cc86cdbf6d871
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| date                |   traffic_station |   traffic_load |\n",
      "|---------------------|-------------------|----------------|\n",
      "| 2022-12-01 00:00:00 |              1001 |              0 |\n",
      "| 2022-12-01 00:00:00 |              1002 |              0 |\n",
      "| 2022-12-01 00:00:00 |              1003 |              0 |\n"
     ]
    }
   ],
   "source": [
    "print(kx.q(\"3#\",traffic))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #fad5ff; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#953eff\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Traffic Cleaning\n",
    "</div>\n",
    "<div style=\"background-color: #fbf1ff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> Although it may look like a simple query, it is performing a seriously heavy operation. The original Pandas implementation looked like this: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> traffic = traffic[traffic[\"error\"] == \"N\"].rename(columns={\"carga\":\"load\", \"id\":\"traffic_station\"})\n",
    " >>> traffic['date'] = pd.to_datetime(traffic['fecha'], errors='coerce')\n",
    " >>> traffic.drop([\"tipo_elem\", \"error\", \"periodo_integracion\", \"fecha\", \"intensidad\", \"ocupacion\", \"vmed\"], axis=1, inplace=True)\n",
    " >>> traffic.groupby([\"date\", 'traffic_station']).mean().reset_index()\n",
    "</code><br>\n",
    "    <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> We observe a noticeable improvement in code legibility, especially once you have familiarised a little bit with the qSQL syntax. The code looks sleeker and simpler using PyKX. We noticed a roughly 10x reduction in execution time: </p>   \n",
    "<table>\n",
    "    <tr style=\"background-color: #FFFFFF;\">\n",
    "        <th style=\"background-color: #fbf1ff;\" ></th>\n",
    "        <th style=\"background-color:#fbf1ff\">Pandas Time</th>\n",
    "        <th style=\"background-color:#fbf1ff\">PyKX Time</th>\n",
    "    </tr>\n",
    "    <tr style= \"border-top: 1px solid #000000\">\n",
    "        <td>Cleaning Traffic</td>\n",
    "        <td>25.5 s ¬± 1.29 s</td>\n",
    "        <td>1.65 s ¬± 248 ms</td>\n",
    "    </tr>\n",
    "</table><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">This time we achieved both simpler and faster code, which we can agree can be considered as a success.</p> \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Keyed tables indexing is different; that's why if we want to see the first values of the table, we need to use the   ```#``` (*take*) operator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "date                          traffic_station| traffic_load\n",
      "---------------------------------------------| ------------\n",
      "2022.12.01D00:00:00.000000000 1001           | 0           \n",
      "2022.12.01D00:00:00.000000000 1002           | 0           \n",
      "2022.12.01D00:00:00.000000000 1003           | 0           \n"
     ]
    }
   ],
   "source": [
    "print(kx.q(\"3#\",traffic))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;ALTERNATIVE FEATURE: Use <a href=\"https://code.kx.com/pykx/1.6/user-guide/advanced/numpy.html\">Numpy</a> and  <a href=\"https://code.kx.com/pykx/1.6/user-guide/advanced/Pandas_API.html\">Pandas</a>\n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> For individuals who are still acclimatizing to the kdb+/q ecosystem, a partial adoption of Numpy's functionality remains accessible. Specifically   <a href=\"https://numpy.org/doc/stable/reference/ufuncs.html\">universal functions</a>. By using this type of function, the average q function that was employed in the previous query can be rephrased as follows:</p> \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black\"> >>> import numpy as np\n",
    " >>>\n",
    " >>> def npmean(arr):\n",
    " >>>   return np.add.reduce(arr) / len(arr)\n",
    " >>>\n",
    " >>> print(npmean(traffic[\"load\"]))    \n",
    "<div style=\"color:#808080;display:inline;\">5.4 </div></code><br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">\n",
    "    While the ability to reuse numpy functions inside q is really nice and can be of great help during a migration like the one we are exemplifying, we found that we were not able to use this numpy function on our <code>kx.q.qsql()</code> query. After executing the previous code, our query would look something like this:  \n",
    "</p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black\"> \n",
    " >>> kx.q[\"npmean\"] = npmean \n",
    " >>> traffic = kx.q.qsql.select(traffic,\n",
    "                                columns = {'traffic_load': 'npmean carga'},\n",
    "                                by = {\"date\":'fecha', \"traffic_station\": 'id'}, \n",
    "                                where = \"error=`N\")\n",
    "</code><br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">\n",
    "    Notice the function called to perform the average of the <code>traffic_load</code> column is the one defined earlier. Even though we didn't get any errors, this resulted in our code running for over 20 minutes with no feedback until we eventually stopped it manually, so we can't recommend the usage Numpy functions inside a qSQL query like we did. We suspect it may have something to do with q's <code>avg</code> function (and all of q's functions) being optimised for this kind of usages and Numpy's implementation not being ready to deal with how kdb+/q implements its tables. It may also have something to do with the <code>group by</code> clause, which creates a keyed table on q, but we can't confirm it as of now.\n",
    "</p>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> On the other hand, Pandas can seamlessly interface with PyKX objects through the Pandas API. This can be effortlessly achieved by importing Numpy and Pandas and toggling a designated flag. We can try to replicate the previous select:</p>     \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black\"> >>> import os\n",
    " >>> os.environ['PYKX_ENABLE_PANDAS_API'] = 'true'\n",
    " >>> import numpy as np\n",
    " >>> import pandas as pd\n",
    " >>>\n",
    " >>> print(traffic.iloc[traffic[\"error\"] == \"N\"][[\"date\", \"traffic_station\",\"load\"]].head())        \n",
    "<br> <div style=\"color:#808080;display:inline;\"> fecha                         id   carga\n",
    "----------------------------------------\n",
    "2022.12.01D00:00:00.000000000 1001 0    \n",
    "2022.12.01D00:15:00.000000000 1001 0    \n",
    "2022.12.01D00:30:00.000000000 1001 0    \n",
    "2022.12.01D00:45:00.000000000 1001 0    \n",
    "2022.12.01D01:00:00.000000000 1001 0    ¬†\n",
    "</div></code>\n",
    "<br>\n",
    " <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> However, it's worth noting that the Pandas API is currently under development, hence not all of Pandas functions have been fully incorporated yet. And unfortunately, <code>groupby</code> is one of them. We hope that in the future we can migrate our Pandas code to PyKX without any changes.</p>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Weather"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This table, serving as the traffic table, will also be imported into the Python environment. Consequently, it becomes accessible as a Python object, albeit not within q scopes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.read.csv('../dic_meteo22.csv', types='I'*4 + '*'*4 + 'FS'*24, delimiter=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To display a table in markdown format, we can transfer it to Pandas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PROVINCIA</th>\n",
       "      <th>MUNICIPIO</th>\n",
       "      <th>ESTACION</th>\n",
       "      <th>MAGNITUD</th>\n",
       "      <th>PUNTO_MUESTREO</th>\n",
       "      <th>ANO</th>\n",
       "      <th>MES</th>\n",
       "      <th>DIA</th>\n",
       "      <th>H01</th>\n",
       "      <th>V01</th>\n",
       "      <th>...</th>\n",
       "      <th>H20</th>\n",
       "      <th>V20</th>\n",
       "      <th>H21</th>\n",
       "      <th>V21</th>\n",
       "      <th>H22</th>\n",
       "      <th>V22</th>\n",
       "      <th>H23</th>\n",
       "      <th>V23</th>\n",
       "      <th>H24</th>\n",
       "      <th>V24</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28</td>\n",
       "      <td>79</td>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>b'28079108_81_98'</td>\n",
       "      <td>b'2022'</td>\n",
       "      <td>b'12'</td>\n",
       "      <td>b'22'</td>\n",
       "      <td>270.0</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>218.0</td>\n",
       "      <td>V</td>\n",
       "      <td>228.0</td>\n",
       "      <td>V</td>\n",
       "      <td>227.83</td>\n",
       "      <td>V</td>\n",
       "      <td>213.67</td>\n",
       "      <td>V</td>\n",
       "      <td>233.83</td>\n",
       "      <td>V</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28</td>\n",
       "      <td>79</td>\n",
       "      <td>108</td>\n",
       "      <td>82</td>\n",
       "      <td>b'28079108_82_98'</td>\n",
       "      <td>b'2022'</td>\n",
       "      <td>b'12'</td>\n",
       "      <td>b'22'</td>\n",
       "      <td>9.0</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>V</td>\n",
       "      <td>10.0</td>\n",
       "      <td>V</td>\n",
       "      <td>9.00</td>\n",
       "      <td>V</td>\n",
       "      <td>9.00</td>\n",
       "      <td>V</td>\n",
       "      <td>8.00</td>\n",
       "      <td>V</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>79</td>\n",
       "      <td>108</td>\n",
       "      <td>83</td>\n",
       "      <td>b'28079108_83_98'</td>\n",
       "      <td>b'2022'</td>\n",
       "      <td>b'12'</td>\n",
       "      <td>b'22'</td>\n",
       "      <td>94.7</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>86.7</td>\n",
       "      <td>V</td>\n",
       "      <td>91.4</td>\n",
       "      <td>V</td>\n",
       "      <td>93.80</td>\n",
       "      <td>V</td>\n",
       "      <td>96.30</td>\n",
       "      <td>V</td>\n",
       "      <td>98.70</td>\n",
       "      <td>V</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows √ó 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PROVINCIA  MUNICIPIO  ESTACION  MAGNITUD     PUNTO_MUESTREO      ANO  \\\n",
       "0         28         79       108        81  b'28079108_81_98'  b'2022'   \n",
       "1         28         79       108        82  b'28079108_82_98'  b'2022'   \n",
       "2         28         79       108        83  b'28079108_83_98'  b'2022'   \n",
       "\n",
       "     MES    DIA    H01 V01  ...    H20 V20    H21 V21     H22 V22     H23 V23  \\\n",
       "0  b'12'  b'22'  270.0   N  ...  218.0   V  228.0   V  227.83   V  213.67   V   \n",
       "1  b'12'  b'22'    9.0   N  ...   10.0   V   10.0   V    9.00   V    9.00   V   \n",
       "2  b'12'  b'22'   94.7   N  ...   86.7   V   91.4   V   93.80   V   96.30   V   \n",
       "\n",
       "      H24 V24  \n",
       "0  233.83   V  \n",
       "1    8.00   V  \n",
       "2   98.70   V  \n",
       "\n",
       "[3 rows x 56 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather[:3].pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As is evident, these objects are not currently within the q memory space. Let's proceed to explore how we can access and leverage q features on these objects. First, we will examine the straightforward `xcol` function, which affords us the ability to rename columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.xcol({'ANO': 'year', 'MES': 'month', 'DIA': 'day', 'ESTACION':'weather_station', 'MAGNITUD':'magnitude'}, weather)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%;  border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: <a href=\"https://code.kx.com/pykx/1.6/user-guide/fundamentals/evaluating.html\">Use q functions </a>\n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> A plethora of q functions can be accessed via the <code>pykx.q</code> interface. The attributes mirrored by these functions closely resemble the parameters anticipated by the corresponding q functions, with Python data structures being employed in lieu of q structures. It is important to note that these functions are compiled and thoroughly elucidated within the <a href=\"https://code.kx.com/pykx/1.6/api/q/q.html\"> PyKX documentation</a></p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> kx.q.distinct(['A', 'B', 'B', 'B' ,'C'])\n",
    "<samp style=\"color:#808080;display:inline;\"> `A`B`C </samp></code><br> \n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> For those who want to dig deeper into kdb+/q and gain experience, you can use q functions and pass PyKX objects as arguments: </p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> kx.q(\"distinct\", ['A', 'B', 'B', 'B' ,'C'])\n",
    "<samp style=\"color:#808080;display:inline;\"> `A`B`C </samp></code><br> \n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> It's important to emphasize that in the preceding function, a Python object is being passed to a q function. When Python objects have a direct equivalent in q, like dictionaries, they can be directly employed as attributes for PyKX functions. Beneath the surface, PyKX adeptly manages the conversion to q data structures. </p>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> Moreover, the application of <a href=\"https://code.kx.com/q/basics/iteration/\">q iterations</a> could be another avenue of exploration: </p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> kx.q(\"lower\").each(['A', 'B', 'C'])\n",
    "<samp style=\"color:#808080;display:inline;\"> `a`b`c </samp></code><br>   \n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> Finally, you can even create functions and use them with PyKX or Python objects.</p>\n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black\"> >>> kx.q(\"{u !(sum x=) each u:distinct x}\", ['A', 'B', 'B', 'B' ,'C'])\n",
    "<samp style=\"color:#808080;display:inline;\"> A| 1\n",
    " B| 3\n",
    " C| 1 </samp></code><br>   \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the following code we have removed several columns that are not relevant to the analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.qsql.delete(weather, ['PUNTO_MUESTREO', 'PROVINCIA', 'MUNICIPIO'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step involves merging the year, month, and day columns into a single unified date column. To initiate this process, we begin by accessing these three individual columns. This can be accomplished through indexing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" \"2022\" ..\n",
      "\"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   \"12\"   ..\n",
      "\"22\"   \"22\"   \"22\"   \"22\"   \"22\"   \"22\"   \"22\"   \"01\"   \"02\"   \"03\"   \"04\"   ..\n"
     ]
    }
   ],
   "source": [
    "print(weather[\"year\", \"month\", \"day\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We observe that the outcome consists of three lists, each containing data corresponding to the sample size. The objective is to form a single list of the sample size, wherein the three date elements are combined:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"2022\" \"12\" \"22\"\n",
      "\"2022\" \"12\" \"22\"\n",
      "\"2022\" \"12\" \"22\"\n"
     ]
    }
   ],
   "source": [
    "print(kx.q.flip(weather[\"year\", \"month\", \"day\"])[:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We appear to be approaching the desired outcome. Currently, we possess a list of sample size, wherein each position contains a sub-list comprising three elements: the day, the month, and the year. To consolidate each sub-list into a singular, unified element, the *each* iterator can be used:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"20221222\"\n",
      "\"20221222\"\n",
      "\"20221222\"\n"
     ]
    }
   ],
   "source": [
    "print(kx.q.each(kx.q.raze, kx.q.flip(weather[\"year\", \"month\", \"day\"]))[:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final step entails converting the resultant data from string format to a date format. However, it's worth noting that certain functions, particularly the overloaded glyphs, have yet to be implemented. For example cast (`$`), take (`#`), concat (`,`)... So we are forced to abandon the pythonic way of calling q functions and perform this casting writing kdb+/q code using the `pykx.q()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022.12.22 2022.12.22 2022.12.22\n"
     ]
    }
   ],
   "source": [
    "date = kx.q('\"D\"$',(kx.q.each(kx.q.raze, kx.q.flip(weather[\"year\", \"month\", \"day\"]))))\n",
    "print(date[:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we add this column to our table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_ = kx.q.qsql.update(weather, columns = {'date': date})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #fad5ff; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#953eff\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Time Join\n",
    "</div>\n",
    "<div style=\"background-color: #fbf1ff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> In Pandas, we achieved this by executing this operation on our table: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> pd.to_datetime(weather[[\"year\", \"month\", \"day\"]])\n",
    "</code><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">It seems to be less complicated thanks to having a function that does exactly what we need, whereas in q we had to implement this function ourselves.</p> \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #7ca1a1;margin-left: 5%; margin-right: 5%; border-top: 3px solid #7ca1a1\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #a5d5d5; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#7ca1a1\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Time Join\n",
    "</div>\n",
    "<div style=\"background-color: #c5ffff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> In Pandas, we achieved this by executing this operation on our table: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> pd.to_datetime(weather[[\"year\", \"month\", \"day\"]])\n",
    "</code><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">It seems to be less complicated thanks to having a function that does exactly what we need, whereas in q we had to implement this function ourselves.</p> \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #ccc2a4; border-left: 3px solid #ccc2a4;margin-left: 5%; margin-right: 5%; border-top: 3px solid #ccc2a4\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #FFEEB2; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#ccc2a4\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Time Join\n",
    "</div>\n",
    "<div style=\"background-color: #fff3cd; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> In Pandas, we achieved this by executing this operation on our table: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> pd.to_datetime(weather[[\"year\", \"month\", \"day\"]])\n",
    "</code><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">It seems to be less complicated thanks to having a function that does exactly what we need, whereas in q we had to implement this function ourselves.</p> \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shortly after, some team members started using q code instead of PyKX functions in the pythonic way, as they found the resulting code to be sleeker and more concise. As their familiarity with q grew, they put forth a suggestion to create a function entirely written in q."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.qsql.update(weather, columns = {'date':'\"D\"$ raze each flip(year;month;day)'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once again, both solutions are entirely compatible and can even be combined. It's at the programmer's discretion to opt for either approach.\n",
    "\n",
    "Now, the three columns that have already been incorporated into the date can be eliminated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.qsql.delete(weather, ['year', 'month', 'day'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The current state of the weather table is as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weather_station</th>\n",
       "      <th>magnitude</th>\n",
       "      <th>H01</th>\n",
       "      <th>V01</th>\n",
       "      <th>H02</th>\n",
       "      <th>V02</th>\n",
       "      <th>H03</th>\n",
       "      <th>V03</th>\n",
       "      <th>H04</th>\n",
       "      <th>V04</th>\n",
       "      <th>...</th>\n",
       "      <th>V20</th>\n",
       "      <th>H21</th>\n",
       "      <th>V21</th>\n",
       "      <th>H22</th>\n",
       "      <th>V22</th>\n",
       "      <th>H23</th>\n",
       "      <th>V23</th>\n",
       "      <th>H24</th>\n",
       "      <th>V24</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>270.0</td>\n",
       "      <td>N</td>\n",
       "      <td>252.0</td>\n",
       "      <td>N</td>\n",
       "      <td>216.0</td>\n",
       "      <td>N</td>\n",
       "      <td>242.0</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>V</td>\n",
       "      <td>228.0</td>\n",
       "      <td>V</td>\n",
       "      <td>227.83</td>\n",
       "      <td>V</td>\n",
       "      <td>213.67</td>\n",
       "      <td>V</td>\n",
       "      <td>233.83</td>\n",
       "      <td>V</td>\n",
       "      <td>2022-12-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108</td>\n",
       "      <td>82</td>\n",
       "      <td>9.0</td>\n",
       "      <td>N</td>\n",
       "      <td>8.0</td>\n",
       "      <td>N</td>\n",
       "      <td>9.0</td>\n",
       "      <td>N</td>\n",
       "      <td>8.0</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>V</td>\n",
       "      <td>10.0</td>\n",
       "      <td>V</td>\n",
       "      <td>9.00</td>\n",
       "      <td>V</td>\n",
       "      <td>9.00</td>\n",
       "      <td>V</td>\n",
       "      <td>8.00</td>\n",
       "      <td>V</td>\n",
       "      <td>2022-12-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>108</td>\n",
       "      <td>83</td>\n",
       "      <td>94.7</td>\n",
       "      <td>N</td>\n",
       "      <td>97.6</td>\n",
       "      <td>N</td>\n",
       "      <td>96.6</td>\n",
       "      <td>N</td>\n",
       "      <td>97.5</td>\n",
       "      <td>N</td>\n",
       "      <td>...</td>\n",
       "      <td>V</td>\n",
       "      <td>91.4</td>\n",
       "      <td>V</td>\n",
       "      <td>93.80</td>\n",
       "      <td>V</td>\n",
       "      <td>96.30</td>\n",
       "      <td>V</td>\n",
       "      <td>98.70</td>\n",
       "      <td>V</td>\n",
       "      <td>2022-12-22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows √ó 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   weather_station  magnitude    H01 V01    H02 V02    H03 V03    H04 V04  \\\n",
       "0              108         81  270.0   N  252.0   N  216.0   N  242.0   N   \n",
       "1              108         82    9.0   N    8.0   N    9.0   N    8.0   N   \n",
       "2              108         83   94.7   N   97.6   N   96.6   N   97.5   N   \n",
       "\n",
       "   ...  V20    H21  V21     H22  V22     H23  V23     H24  V24       date  \n",
       "0  ...    V  228.0    V  227.83    V  213.67    V  233.83    V 2022-12-22  \n",
       "1  ...    V   10.0    V    9.00    V    9.00    V    8.00    V 2022-12-22  \n",
       "2  ...    V   91.4    V   93.80    V   96.30    V   98.70    V 2022-12-22  \n",
       "\n",
       "[3 rows x 51 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather[:3].pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's shift our focus towards deconstructing the H* and V* queries into multiple rows, while simultaneously introducing a time column to prevent information gaps. In q, the conventional approach would involve leveraging functional qSQL to extract columns conforming to the aforementioned patterns. However, we will capitalize on the advantage that PyKX offers by incorporating q code via strings to sidestep this method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def functionalSearch(cols, pattern, func):\n",
    "    xcols = cols[kx.q.where(kx.q.like(cols, pattern))]\n",
    "    xstring = func.format(kx.q.sv(b\";\", kx.q.string(xcols)).py().decode(\"utf-8\"))\n",
    "    return xcols, xstring"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function above accepts a list of columns, a designated pattern for searching, and a q function represented as a string. This function takes the columns found following the specified pattern in qSQL format (where columns are accessed by their names, not symbols) as an argument. When applied to all columns commencing with \"H,\" it yields these columns as a vector of symbols, alongside a string representation of these columns in qSQL format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns found:  `H01`H02`H03`H04`H05`H06`H07`H08`H09`H10`H11`H12`H13`H14`H15`H16`H17`H18`H19`..\n",
      "qSQL function:  H01;H02;H03;H04;H05;H06;H07;H08;H09;H10;H11;H12;H13;H14;H15;H16;H17;H18;H19;H20;H21;H22;H23;H24\n"
     ]
    }
   ],
   "source": [
    "cols = kx.q.cols(weather)\n",
    "found_columns, qsql_function = functionalSearch(cols, b'H*', \"{}\")\n",
    "\n",
    "print(\"Columns found: \", found_columns)\n",
    "print(\"qSQL function: \", qsql_function)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This capability is remarkably powerful, as it enables the utilization of qSQL alongside variables, obviating the need for functional forms which can often prove intricate for individuals new to kdb+/q development.\n",
    "\n",
    "Now, let's apply the above methodology to the columns commencing with **H**, which correspond to the measurement values, and to the columns commencing with **V**, which indicate the validity of the measurements. The function employed to transform the measurement column into rows is `flip`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "hcols, value = functionalSearch(cols, b'H*', \"flip({})\")\n",
    "vcols, valid = functionalSearch(cols, b'V*', \"flip({})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our next step involves feeding our internally constructed functions, represented as strings, into the qSQL `update` function. This is done in conjunction with the repetition of the 24-hour sequence to match the initial number of rows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.qsql.update(weather, columns = {'hour': 'count[i]#enlist 01:00*til 24', 'values': value, 'valid': valid})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To remove columns beginning with **H** or **V**, we can employ the same approach as earlier to circumvent the need for functional qSQL:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.qsql.delete(weather, columns = kx.q.raze(hcols,vcols).py())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weather_station</th>\n",
       "      <th>magnitude</th>\n",
       "      <th>date</th>\n",
       "      <th>hour</th>\n",
       "      <th>values</th>\n",
       "      <th>valid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>2022-12-22</td>\n",
       "      <td>[0 minutes, 60 minutes, 120 minutes, 180 minut...</td>\n",
       "      <td>[270.0, 252.0, 216.0, 242.0, 239.0, 246.0, 233...</td>\n",
       "      <td>[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108</td>\n",
       "      <td>82</td>\n",
       "      <td>2022-12-22</td>\n",
       "      <td>[0 minutes, 60 minutes, 120 minutes, 180 minut...</td>\n",
       "      <td>[9.0, 8.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, ...</td>\n",
       "      <td>[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>108</td>\n",
       "      <td>83</td>\n",
       "      <td>2022-12-22</td>\n",
       "      <td>[0 minutes, 60 minutes, 120 minutes, 180 minut...</td>\n",
       "      <td>[94.7, 97.6, 96.6, 97.5, 97.5, 98.2, 98.8, 98....</td>\n",
       "      <td>[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   weather_station  magnitude       date  \\\n",
       "0              108         81 2022-12-22   \n",
       "1              108         82 2022-12-22   \n",
       "2              108         83 2022-12-22   \n",
       "\n",
       "                                                hour  \\\n",
       "0  [0 minutes, 60 minutes, 120 minutes, 180 minut...   \n",
       "1  [0 minutes, 60 minutes, 120 minutes, 180 minut...   \n",
       "2  [0 minutes, 60 minutes, 120 minutes, 180 minut...   \n",
       "\n",
       "                                              values  \\\n",
       "0  [270.0, 252.0, 216.0, 242.0, 239.0, 246.0, 233...   \n",
       "1  [9.0, 8.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, ...   \n",
       "2  [94.7, 97.6, 96.6, 97.5, 97.5, 98.2, 98.8, 98....   \n",
       "\n",
       "                                               valid  \n",
       "0  [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...  \n",
       "1  [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...  \n",
       "2  [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather[:3].pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, the remaining task involves expanding the table so that each element within the lists corresponds to a distinct row:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q.ungroup(weather)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can further streamline the table by eliminating rows that lack validity and merging the date with the time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weather_station</th>\n",
       "      <th>magnitude</th>\n",
       "      <th>date</th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>2022-12-22 10:00:00</td>\n",
       "      <td>263.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>2022-12-22 11:00:00</td>\n",
       "      <td>247.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>2022-12-22 12:00:00</td>\n",
       "      <td>215.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   weather_station  magnitude                date  values\n",
       "0              108         81 2022-12-22 10:00:00  263.00\n",
       "1              108         81 2022-12-22 11:00:00  247.83\n",
       "2              108         81 2022-12-22 12:00:00  215.83"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather = kx.q.qsql.select(weather, where = 'valid=`V')\n",
    "weather = kx.q.qsql.update(weather, columns = {'date': 'date+hour'})\n",
    "weather = kx.q.qsql.delete(weather, columns = [\"valid\", \"hour\"])\n",
    "weather[:3].pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **magnitude** column plays a pivotal role in attributing meaning to the **value**. As outlined by the dataset creators, the diverse magnitudes align with the elements encapsulated within the following dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "magnitude = {80:\"ultraviolet\", \n",
    "             81:\"wind\", \n",
    "             82:\"direction\", \n",
    "             83:\"temperature\", \n",
    "             86:\"humidity\", \n",
    "             87:\"pressure\", \n",
    "             88:\"solar\", \n",
    "             89:\"rainfall\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We just have to change the key by the value of the dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q('{update magnitude: x magnitude from y}', magnitude, weather)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, all we have to do is separate the different weather conditions into different columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = kx.q('{exec (value x)#magnitude!values by date,weather_station from y}',magnitude,weather)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `exec` query provides us with the capability to transform a dictionary, stored within a column, into multiple columns. In this transformation, the keys become the column names, and the values constitute the data within those respective columns. This proves particularly beneficial when dealing with a dictionary that represents the weather conditions of each entry, linked with their respective values. By implementing this approach and subsequently grouping the data, we effectively disseminate the weather conditions across distinct columns for each weather entry and weather station."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #fad5ff; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#953eff\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Weather Cleaning\n",
    "</div>\n",
    "<div style=\"background-color: #fbf1ff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> This turned out to be a complex migration, since on Pandas this \"flipping\" functionality is provided by `melt`: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> weather_hour = weather.melt(id_vars=[\"weather_station\", \"magnitud\", \"date\"],\n",
    "                            value_vars=[x for x in weather.columns if re.match(\"^H\", x)],\n",
    "                            var_name=\"hour\")\n",
    " >>>  \n",
    " >>> weather_valid = weather.melt(value_vars=[x for x in weather.columns if re.match(\"^V\", x)], var_name=\"valid\")\n",
    "</code><br>\n",
    "    <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> As for the subsequent operations, those turned more alike to the original Pandas implementation: </p>   \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> weather= weather_hour[weather_valid[\"value\"] == \"V\"].reset_index()\n",
    " >>> \n",
    " >>> weather[\"hour\"] = weather[\"hour\"].str[1:]\n",
    " >>> weather[\"hour\"] = pd.to_timedelta(weather['hour'].astype(int)-1, unit='h')\n",
    " >>> weather[\"date\"] = weather[\"date\"] + weather[\"hour\"]\n",
    " >>> \n",
    " >>> weather_values = weather.assign(MAGNITUD = weather[\"magnitud\"].map({80:\"ultraviolet\",\n",
    "                         81:\"wind\",\n",
    "                         82:\"direction\",\n",
    "                         83:\"temperature\",\n",
    "                         86:\"humidity\",\n",
    "                         87:\"pressure\",\n",
    "                         88:\"solar\",\n",
    "                         89:\"rainfall\"})) \\\n",
    "                         .MAGNITUD.str.get_dummies() \\\n",
    "                         .multiply(weather[\"value\"], axis=\"index\") \n",
    " >>> \n",
    " >>> weather = pd.concat([weather, weather_values], axis=1)\n",
    " >>> weather = weather.drop([\"index\", \"hour\", \"magnitud\", \"value\"], axis=1)\n",
    " >>> weather = weather.groupby([\"date\", \"weather_station\"]).sum().reset_index()\n",
    "</code><br>\n",
    "    <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">All in all, this table proved to be quite tricky with the migration, but nothing unmanageable. The rest of the migration was far simpler. Overall, we noticed again a 10x decrease in execution time, which we consider something remarkable. </p> \n",
    "    <table>\n",
    "    <tr style=\"background-color: #FFFFFF;\">\n",
    "        <th style=\"background-color: #fbf1ff;\" ></th>\n",
    "        <th style=\"background-color:#fbf1ff\">Pandas Time</th>\n",
    "        <th style=\"background-color:#fbf1ff\">PyKX Time</th>\n",
    "    </tr>\n",
    "    <tr style=\"background-color:#fbf1ff; border-top: 1px solid #000000\">\n",
    "        <td>Cleaning Weather</td>\n",
    "        <td>247 ms ¬± 10.4 ms</td>\n",
    "        <td>26.7 ms ¬± 683 ¬µs</td>\n",
    "    </tr>\n",
    "</table><br>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Location"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both traffic and weather station tables will be loaded into the q memory space:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "kx.q[\"weather_station\"] = kx.q(\".Q.id\", kx.q.read.csv('../Estaciones_control_datos_meteorologicos.csv', types=\" IFF\", delimiter=\";\", as_table=True))\n",
    "kx.q[\"traffic_station\"] = kx.q.read.csv('../pmed_ubicacion_12-2022.csv', types = \"SII**FFFF\", delimiter = \";\", as_table=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now able to access these objects within q functions without the necessity of passing them as PyKX or Python objects. To illustrate, let's proceed to modify the column names in both tables in order to establish a uniform naming convention:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "kx.q(\"weather_station:(`CDIGO_CORTO`LONGITUD`LATITUD!`weather_station`longitude`latitude) xcol weather_station\")\n",
    "_=kx.q(\"traffic_station:(`id`longitud`latitud!`traffic_station`longitude`latitude) xcol traffic_station\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%; \">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: Use <a href=\"https://code.kx.com/pykx/1.6/user-guide/fundamentals/creating.html#by-retrieving-a-named-entity-from-qs-memory\">Q memory space</a> \n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px; \">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> If you feel more comfortable programming in q, you have the option to operate within the q memory space. PyKX objects can be seamlessly transferred into the q memory space, where you can manipulate them as if you were operating within a q ecosystem, employing the following code: <code>kx.q[\"table\"]</code>. Once you've completed your operations, you can effortlessly bring them back to the Python memory space by returning them using q code: <code>kx.q(\"table\")</code></p>       \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our objective is to merge these two tables. Currently, there appears to be no identifier that readily facilitates a conventional join. Nevertheless, it's worth noting that both the weather and traffic stations are situated by coordinates. We can exploit the spatial proximity between stations designated for measuring traffic and weather to facilitate the join. To compute the distance between two sets of coordinates, the [Harvesine distance](https://en.wikipedia.org/wiki/Haversine_formula) as previously discussed, can be employed. It's important to acknowledge that while this distance function is readily available in Python, it is not natively accessible within q."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "pip install haversine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One potential approach would involve re-implementing the Haversine distance function in q. However, this might become impractical for more complex libraries. Alternatively, although slower, we could transmit our q objects to Python and work with them there. Nonetheless, it's strongly recommended to avoid switching objects between q and Python. However, the data we had to move between memory spaces wasn't very large (and we were careful about this) and we didn't see any noticeable drop in performance.\n",
    "\n",
    "The features we've elucidated earlier, allowing us to transition between Python and q objects, empower us to temporarily reuse Python code. This is particularly pertinent given the scale of tables we are currently dealing with. To incorporate our q objects into this function, we can leverage certain PyKX tools to convert them into Python objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from haversine import haversine_vector, Unit\n",
    "dist = kx.toq(\n",
    "            haversine_vector(kx.q('`longitude`latitude # weather_station').pd(), \n",
    "                             kx.q('`longitude`latitude # traffic_station').pd(),\n",
    "                             Unit.KILOMETERS, comb=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We've reached a point where we have a matrix detailing the distance in kilometers for every combination of traffic and weather stations. Our upcoming task is to pinpoint pairs of station identifiers that exhibit the minimum distance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids = kx.q.each(kx.q('{first where x=min x}'), dist)\n",
    "distance_table = kx.q('{traffic_station ^ weather_station[x]}' ,  ids)\n",
    "distance_table = kx.q.qsql.delete(distance_table, columns = ['tipo_elem','distrito','cod_cent','nombre','utm_x','utm_y','longitude', 'latitude'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this we have a mapping that relates every traffic station to its nearest weather station:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>traffic_station</th>\n",
       "      <th>weather_station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3840</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3841</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3842</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   traffic_station  weather_station\n",
       "0             3840              109\n",
       "1             3841              109\n",
       "2             3842                8"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance_table[:3].pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final Table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Integrating the three tables is a relatively straightforward process. The distances table can be seamlessly merged with either of the other two using a simple left join. However, when joining the traffic and weather tables, an asof join (`aj`) is necessary due to their disparate time intervals. To conclude, two columns, time and day of the week, should be appended to furnish the model with the data's inherent seasonality:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "complete = kx.q.lj(traffic, kx.q.xkey('traffic_station', distance_table))\n",
    "complete = kx.q.aj(kx.toq(['date','weather_station']), complete, weather)\n",
    "complete = kx.q.qsql.update(kx.q(\"0^\",complete),  {\"hour\":\"`hh$date\", \"weekday\":'(\"d\"$date)mod 7'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at this last table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>traffic_load</th>\n",
       "      <th>weather_station</th>\n",
       "      <th>ultraviolet</th>\n",
       "      <th>wind</th>\n",
       "      <th>direction</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>pressure</th>\n",
       "      <th>solar</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>hour</th>\n",
       "      <th>weekday</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>traffic_station</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2022-12-01</th>\n",
       "      <th>1001</th>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>239.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>946.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>239.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>946.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>239.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>946.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>239.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>946.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1009</th>\n",
       "      <td>0.0</td>\n",
       "      <td>110</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.35</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>79.0</td>\n",
       "      <td>937.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            traffic_load  weather_station  ultraviolet  wind  \\\n",
       "date       traffic_station                                                     \n",
       "2022-12-01 1001                      0.0               24          0.0  0.54   \n",
       "           1002                      0.0               24          0.0  0.54   \n",
       "           1003                      0.0               24          0.0  0.54   \n",
       "           1006                      0.0               24          0.0  0.54   \n",
       "           1009                      0.0              110          0.0  0.35   \n",
       "\n",
       "                            direction  temperature  humidity  pressure  solar  \\\n",
       "date       traffic_station                                                      \n",
       "2022-12-01 1001                 239.0          6.0      84.0     946.0    1.0   \n",
       "           1002                 239.0          6.0      84.0     946.0    1.0   \n",
       "           1003                 239.0          6.0      84.0     946.0    1.0   \n",
       "           1006                 239.0          6.0      84.0     946.0    1.0   \n",
       "           1009                   2.0          7.9      79.0     937.0    1.0   \n",
       "\n",
       "                            rainfall  hour  weekday  \n",
       "date       traffic_station                           \n",
       "2022-12-01 1001                  0.0     0        5  \n",
       "           1002                  0.0     0        5  \n",
       "           1003                  0.0     0        5  \n",
       "           1006                  0.0     0        5  \n",
       "           1009                  0.0     0        5  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kx.q(\"5#\",complete).pd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #fad5ff; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#953eff\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Final table\n",
    "</div>\n",
    "<div style=\"background-color: #fbf1ff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> This is another bottleneck we encountered on our profiling. On Pandas, the code looked kind of similar, with a simple join and an asof join: </p>        \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> complete = traffic.merge(distance_table, on=[\"traffic_station\"], how=\"inner\")\n",
    ">>> complete = pd.merge_asof(complete.sort_values([\"date\"]), weather, on='date', by=[\"weather_station\"])\n",
    "</code><br>\n",
    "    <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">However we once again noticed a 10x reduction in execution time: </p>   \n",
    "<table>\n",
    "    <tr style=\"background-color: #FFFFFF;\">\n",
    "        <th style=\"background-color: #fbf1ff;\" ></th>\n",
    "        <th style=\"background-color:#fbf1ff\">Pandas Time</th>\n",
    "        <th style=\"background-color:#fbf1ff\">PyKX Time</th>\n",
    "    </tr>\n",
    "    <tr style= \"border-top: 1px solid #000000\">\n",
    "        <td>Join Final Table</td>\n",
    "        <td>7.1 s ¬± 168 ms</td>\n",
    "        <td>686 ms ¬± 24.1 ms</td>\n",
    "    </tr>\n",
    "</table><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">This improvement is most likely due to performance benefits when using kdb, as it's optimized for time series data and the asof join, which is where most of this performance gain came from.</p> \n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model <a class=\"anchor\" id=\"t32\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the model's input, we chose to cherry-pick only the essential columns. Moreover, we apply normalization to the rainfall column using a straightforward MinMax scaler. This function can be included within the q memory space, ready for use whenever necessary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "kx.q(\"minMaxScale:{[l] {(x-y)%(z-y)}[;min l;max l]l}\")\n",
    "                  \n",
    "final = kx.q.qsql.select(complete, columns = {\"date\": \"date\",\n",
    "                                              \"traffic_station\":\"traffic_station\",\n",
    "                                              \"hour\":\"hour\", \n",
    "                                              \"weekday\": \"weekday\", \n",
    "                                              \"traffic_load\": \"traffic_load%100\",\n",
    "                                              \"rainfall\":\"minMaxScale rainfall\"}\n",
    "                                    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Throughout this transition from Pandas, the primary challenge emerged while migrating the `time_window` function, given its reliance on loops. Our approach involved first comprehending the input data, defining the desired output, and then formulating an idiomatic q implementation rather than a direct 1:1 migration. This method proved more time-efficient. \n",
    "\n",
    "In this scenario, our input consisted of a table, and our desired output was a list of matrices for each station. To facilitate this process, we devised multiple functions that proved invaluable:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **sliding window**: given a matrix, x, divides it into chunks of length y:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "_=kx.q(\"\"\"sw:{({y#z _x}[x;y;]')til count b:y _x}\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **get target**: For a given matrix, x, it takes the target located in the column z and the first lines are eliminated to match with the chunks length y:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "_=kx.q(\"\"\"gt:{y _(flip x)[z]}\"\"\") # gets target (in position z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **to Matrix**: Transform the table x to a matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "_=kx.q(\"\"\"toMatrix:{({[t;i]value t[i]}[x;]')til count x:flip x}\"\"\") # table to matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **prepareData**: This function is designed to create the training and testing datasets. It begins by selecting the necessary columns (`columns`) from the table, grouped by traffic station. For each traffic station, it retains `ntest` rows for testing purposes. The data is divided into chunks of length `chunkLen`. Finally, the function constructs a list of dictionaries for training data and training targets (the load column), as well as test data and test targets.\n",
    "\n",
    "  To start, regardless of whether we require the training or testing output, we must retrieve either the last `ntest`* records or up to the last `ntest` records. Given the necessity of performing this operation for the designated columns, a functional statement emerged as the most suitable approach.\n",
    "\n",
    "  Once we've molded the data to align with our requirements, the subsequent step involves constructing the list of matrices. Achieving this entails employing a sliding window approach. In order to return a list of matrices, rather than a list of tables, we leveraged the `toMatrix` function, which facilitates the transformation of a table into a matrix. Additionally, we harnessed the `sw` (sliding window) function to apply the sliding window concept to a singular large matrix.\n",
    "\n",
    "  In terms of the y data, we enlisted the `gt` (get target) function. This function retrieves the target data (traffic load), with the exclusion of the first `chunkLen+1` entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "_=kx.q(\"\"\"\n",
    "        prepareData:{[data; ntest; chunkLen; columns; locTarget]  \n",
    "            train:(toMatrix')?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;_;ntest]')columns]; \n",
    "            test:(toMatrix')?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;#;ntest]')columns];                                                                               \n",
    "            (((sw[;chunkLen]')test;(gt[;chunkLen;locTarget]')test);((sw[;chunkLen]')train;(gt[;chunkLen;locTarget]')train))   \n",
    "        }\n",
    "    \"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets test this function in action with only one station:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "station_id = 4010\n",
    "\n",
    "station = kx.q.qsql.select(final, where=[\"traffic_station=\"+str(station_id)])\n",
    "\n",
    "data = kx.q(\"prepareData\", station, 500, 5, kx.SymbolVector(['rainfall', 'traffic_load', 'hour', 'weekday']), 1)\n",
    "\n",
    "X_train, y_train = np.array(data[0][0][station_id].py()), np.array(data[0][1][station_id].py())\n",
    "X_test, y_test =  np.array(data[1][0][station_id].py()), np.array(data[1][1][station_id].py())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #fad5ff; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#953eff\"></i>&nbsp;&nbsp;&nbsp;Pandas Alternative: Model Ingestion\n",
    "</div>\n",
    "<div style=\"background-color: #fbf1ff; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> This is the last bottleneck we ran into while doing our profiling. We used the Python Sklearn MinMax scaler for this. </p> <code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> >>> from sklearn.preprocessing import MinMaxScaler\n",
    " >>> final_table[\"load\"]/=100\n",
    " >>> final_table[\"rainfall\"] = MinMaxScaler().fit_transform(final_table[\"rainfall\"]) \n",
    "</code><br>\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\"> We also created a custom function to make those 5-step back chunks for a particular station: </p>       \n",
    "<code style=\"background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black\"> \n",
    " >>> <div style=\"color:#007979;display:inline;\"># Table Index: Load -> 2, Rainfall -> 7, Hour -> 11, Weekday -> 12 </div>\n",
    " >>> \n",
    " >>> <div style=\"color:#007979;display:inline;\"># Assign to each traffic station an array with the target column and the training information</div>\n",
    " >>> \n",
    " >>> train = final_table.groupby('traffic_station').apply(lambda x: np.array(x[:500])[:,[2,7,11,12]].astype(float))\n",
    " >>> test  = final_table.groupby('traffic_station').apply(lambda x: np.array(x[500:])[:,[2,7,11,12]].astype(float))\n",
    " >>> \n",
    " >>> <div style=\"color:#007979;display:inline;\"># Crete 5 step back chunks </div>\n",
    " >>> def time_window(traffic_station, dataset, look_back=5):\n",
    " >>>         data_X,  data_y= [], []\n",
    " >>>         station_data = dataset[traffic_station]\n",
    " >>>         for i in range(len(station_data)-look_back-1):\n",
    " >>>             data_X.append(station_data[i:(i+look_back)])\n",
    " >>>             data_y.append(station_data[i+look_back+1, 2])\n",
    " >>>         return np.array(data_X), np.array(data_y)\n",
    " >>> \n",
    " >>> train_X, train_y = create_dataset(train)\n",
    " >>> test_X, test_y = create_dataset(test)\n",
    "</code><br>\n",
    "    <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">In this final test, we once again notice a huge time improvement:</p>   \n",
    "<table>\n",
    "    <tr style=\"background-color: #FFFFFF;\">\n",
    "        <th style=\"background-color: #fbf1ff;\" ></th>\n",
    "        <th style=\"background-color:#fbf1ff\">Pandas Time</th>\n",
    "        <th style=\"background-color:#fbf1ff\">PyKX Time</th>\n",
    "    </tr>\n",
    "    <tr style= \"border-top: 1px solid #000000\">\n",
    "        <td>Model Ingestion Preprocess</td>\n",
    "        <td>3.2 s ¬± 54.2 ms</td>\n",
    "        <td>178 ms ¬± 8.01 ms</td>\n",
    "    </tr>\n",
    "</table><br>\n",
    "     <p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%;line-weight: 1.5\">This improvement is most likely due to performance benefits when using kdb, as it's optimized for time series data and the asof join, which is where most of this performance gain came from.</p> \n",
    "</div>\n",
    "</div>\n",
    "\n",
    "That wraps up our migration to PyKX.  Next, we proceed to confirm that the model is working as intended with the data we acquired through PyKX."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, we install Tensorflow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now we create and train a simple LSTM model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense,LSTM \n",
    "\n",
    "model = Sequential()\n",
    "model.add(LSTM(units = 50, return_sequences=False, input_shape=[None,4]))\n",
    "model.add(Dense(units = 1))\n",
    "model.compile(loss='mae', optimizer='adam')\n",
    "\n",
    "def fit(train_X, train_y, test_X, test_y):\n",
    "    return model.fit(train_X, train_y, \n",
    "                    epochs=50, batch_size=8, \n",
    "                    validation_data=(test_X, test_y), \n",
    "                    verbose=0, shuffle=False)\n",
    "\n",
    "\n",
    "def predict(data):\n",
    "    return model.predict(data, verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can observe the loss curves for both training and validation over epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHFCAYAAAAaD0bAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB9kElEQVR4nO3deVhU9eLH8few7wiCLIqI+75hGpotVpampdXN0hZLb9d29Va3stW62a/VuqXdStu92mKmZZnlkrnkBmruG4ICKiggIOuc3x8HRhFQQJhB+LyeZ54ZzjlzzncO6nz8rhbDMAxEREREGhAnRxdARERExN4UgERERKTBUQASERGRBkcBSERERBocBSARERFpcBSAREREpMFRABIREZEGRwFIREREGhwFIBEREWlwFICkXrNYLJV6LFu27Lyu8/zzz2OxWGqm0Hb2ySefYLFYiI+Pr/CYHj160LRpU4qKiio8pl+/fgQFBZGfn1+p68bHx2OxWPjkk0+qVJYSl19+OZdffnmlrnWml19+mXnz5pXZvmzZshr581Ado0ePxsfHx+7XrQ6r1crnn3/OVVddRVBQEK6urjRp0oQhQ4awYMECrFaro4sock4KQFKvrV69utRj8ODBeHp6ltnes2fP87rO2LFjWb16dQ2Vuu4ZM2YMSUlJLFq0qNz9u3btYtWqVdxxxx24ublV+zrXXXcdq1evJiwsrNrnqIyKAlDPnj1r5M9DfZabm8vgwYO56667aNKkCdOnT2fJkiW8//77hIeH87e//Y0FCxY4upgi5+Ti6AKI1KaLL7641M/BwcE4OTmV2X6mnJwcvLy8Kn2dZs2a0axZs2qV8UIwatQoHnvsMWbOnMngwYPL7J85cyYA99xzz3ldJzg4mODg4PM6x/nw8/M755+Nhm7ixIksWrSITz/9lDvvvLPUvhtvvJHHHnuMkydP1si1qvr3UKQqVAMkDd7ll19O586d+f333+nbty9eXl62L/I5c+YwcOBAwsLC8PT0pEOHDjzxxBNkZ2eXOkd5TWAtWrRgyJAh/Pzzz/Ts2RNPT0/at29vCwvn8sILL9CnTx8CAwPx8/OjZ8+ezJgxgzPXL67KddasWUO/fv3w8PAgPDycJ598koKCgnOWJSAggOHDh7NgwQLS0tJK7SsqKuLzzz/noosuokuXLuzZs4e7776bNm3a4OXlRdOmTRk6dChbtmw553XKawIzDINXX32VyMhIPDw86NmzJz/99FOZ9+bm5vLPf/6T7t274+/vT2BgIDExMXz//feljrNYLGRnZ/Ppp5/amkBLmtIqagKbP38+MTExeHl54evry9VXX12mxq/kz8DWrVu57bbb8Pf3JyQkhHvuuYeMjIxzfvbKmjlzJt26dcPDw4PAwECGDx/O9u3bSx2zb98+br31VsLDw3F3dyckJIQrr7ySuLg42zFLlizh8ssvp3Hjxnh6etK8eXNuuukmcnJyKrx2SkoKH330Eddcc02Z8FOiTZs2dO3aFai4SbO8+1zR38Nhw4YRGRlZbrNanz59StXWGYbBtGnT6N69O56engQEBHDzzTezb9++Uu+LjY1lyJAhNGnSBHd3d8LDw7nuuus4ePBghZ9d6h8FIBEgOTmZ22+/nZEjR7Jw4ULuv/9+AHbv3s3gwYOZMWMGP//8M+PHj+err75i6NChlTrvpk2b+Oc//8mECRP4/vvv6dq1K2PGjOH3338/53vj4+P5xz/+wVdffcXcuXO58cYbeeihh3jxxRerdZ1t27Zx5ZVXkp6ezieffML7779PbGwsL730UqU+y5gxY8jPz+eLL74otX3RokUkJSUxZswYAJKSkmjcuDGvvPIKP//8M++99x4uLi706dOHnTt3Vupap3vhhRf417/+xdVXX828efO47777+Pvf/17mXHl5eRw7doxHH32UefPm8b///Y9LLrmEG2+8kc8++8x23OrVq/H09GTw4MG2JtBp06ZVeP1Zs2Zxww034Ofnx//+9z9mzJjB8ePHufzyy/njjz/KHH/TTTfRtm1bvv32W5544glmzZrFhAkTqvy5yzNlyhTGjBlDp06dmDt3Lm+//TabN28mJiaG3bt3244bPHgwGzZs4NVXX2Xx4sVMnz6dHj16kJ6eDph/tq677jrc3NyYOXMmP//8M6+88gre3t5n7cO1dOlSCgoKGDZsWI18njOV9/fwnnvuISEhgSVLlpQ6dseOHaxdu5a7777btu0f//gH48eP56qrrmLevHlMmzaNrVu30rdvXw4fPgxAdnY2V199NYcPH+a9995j8eLFTJ06lebNm3PixIla+VxSRxkiDchdd91leHt7l9p22WWXGYDx22+/nfW9VqvVKCgoMJYvX24AxqZNm2z7nnvuOePMv06RkZGGh4eHceDAAdu2kydPGoGBgcY//vGPKpW7qKjIKCgoMCZPnmw0btzYsFqtVb7OiBEjDE9PTyMlJcW2rbCw0Gjfvr0BGPv37z/n54+KijK6du1aavtNN91keHl5GRkZGeW+r7Cw0MjPzzfatGljTJgwwbZ9//79BmB8/PHHtm0ff/xxqbIcP37c8PDwMIYPH17qnCtXrjQA47LLLquwvIWFhUZBQYExZswYo0ePHqX2eXt7G3fddVeZ9yxdutQAjKVLlxqGYd738PBwo0uXLkZRUZHtuBMnThhNmjQx+vbta9tW8mfg1VdfLXXO+++/3/Dw8Cj1OytPeX82T3f8+HHD09PTGDx4cKntCQkJhru7uzFy5EjDMAwjNTXVAIypU6dWeK5vvvnGAIy4uLizlulMr7zyigEYP//8c6WOP/P3WeLM+2wYFf89LCgoMEJCQmyfr8Tjjz9uuLm5GampqYZhGMbq1asNwHjjjTdKHZeYmGh4enoajz/+uGEYhrF+/XoDMObNm1epzyD1l2qARDCbeAYMGFBm+759+xg5ciShoaE4Ozvj6urKZZddBlCm2aE83bt3p3nz5rafPTw8aNu2LQcOHDjne5csWcJVV12Fv7+/7drPPvssaWlpHDlypMrXWbp0KVdeeSUhISG2bc7OzowYMeKcZQGz6ejuu+9m8+bNbNiwAYC0tDQWLFjATTfdhJ+fHwCFhYW8/PLLdOzYETc3N1xcXHBzc2P37t2VumenW716Nbm5uYwaNarU9r59+xIZGVnm+K+//pp+/frh4+ODi4sLrq6uzJgxo8rXLbFz506SkpK44447cHI69c+lj48PN910E2vWrCnTZHT99deX+rlr167k5uaW+Z1V1erVqzl58iSjR48utT0iIoIBAwbw22+/ARAYGEirVq147bXXePPNN4mNjS3TfNS9e3fc3Ny49957+fTTT8s0ETlKeX8PXVxcuP3225k7d66tKbGk2fWGG26gcePGAPzwww9YLBZuv/12CgsLbY/Q0FC6detma25r3bo1AQEB/Otf/+L9999n27Ztdv2MUncoAIlAuaOOsrKy6N+/P3/++ScvvfQSy5YtY926dcydOxegUh09S/5xPp27u/s537t27VoGDhwIwIcffsjKlStZt24dkyZNKvfalblOWloaoaGhZY4rb1tF7r77bpycnPj4448B+PLLL8nPz7c1f4HZSfaZZ55h2LBhLFiwgD///JN169bRrVu3KneOLelvVJlyz507l1tuuYWmTZvyxRdfsHr1atatW8c999xDbm5ula575vXL+/MRHh6O1Wrl+PHjpbaf+btwd3cHKvfn5XzKUrLfYrHw22+/cc011/Dqq6/Ss2dPgoODefjhh21NPK1ateLXX3+lSZMmPPDAA7Rq1YpWrVrx9ttvn7UMJSF7//795/VZKlLR6L+S3+Hs2bMBs9k1OTm5VPPX4cOHMQyDkJAQXF1dSz3WrFlDamoqAP7+/ixfvpzu3bvz1FNP0alTJ8LDw3nuuecq1R9O6g+NAhOBcufwWbJkCUlJSSxbtsxW6wPY+lHUptmzZ+Pq6soPP/yAh4eHbXt5Q7crq3HjxqSkpJTZXt62ijRr1oyBAwcya9Ys3njjDT7++GNat27NpZdeajvmiy++4M477+Tll18u9d7U1FQaNWpU5TJXVMaUlBRatGhR6rpRUVHMmTOn1O8zLy+vStcs7/rJycll9iUlJeHk5ERAQEC1z1+TZQkKCrL9HBkZyYwZMwBzioKvvvqK559/nvz8fN5//30A+vfvT//+/SkqKmL9+vX85z//Yfz48YSEhHDrrbeWW4YrrrgCV1dX5s2bx7hx485Z5pI/u2f+DkrCyJkqmkurY8eO9O7dm48//ph//OMffPzxx4SHh9v+kwAQFBSExWJhxYoVttB5utO3denShdmzZ2MYBps3b+aTTz5h8uTJeHp68sQTT5zzc0n9oBogkQqU/GN85j+m//3vf+1ybRcXF5ydnW3bTp48yeeff17tc15xxRX89ttvts6gYDYlzJkzp0rnGTNmDMePH+fZZ58lLi6Ou+++u9QXl8ViKXPPfvzxRw4dOlTlMl988cV4eHjw5Zdfltq+atWqMs2IFosFNze3UmVJSUkpMwoMKlcLB9CuXTuaNm3KrFmzSo2+y87O5ttvv7WNDLOHmJgYPD09y3RCP3jwIEuWLOHKK68s931t27bl6aefpkuXLmzcuLHMfmdnZ/r06cN7770HUO4xJUJDQxk7diyLFi0q1bH8dHv37mXz5s0AtoBa8nOJ+fPnV3iNitx99938+eef/PHHHyxYsIC77rqr1N+PIUOGYBgGhw4dolevXmUeXbp0KXNOi8VCt27deOutt2jUqNFZP7vUP6oBEqlA3759CQgIYNy4cTz33HO4urry5ZdfsmnTplq/9nXXXcebb77JyJEjuffee0lLS+P1118v93+2lfX0008zf/58BgwYwLPPPouXlxfvvfdemSH953L99dcTFBTEa6+9hrOzM3fddVep/UOGDOGTTz6hffv2dO3alQ0bNvDaa69Va56kgIAAHn30UV566SXGjh3L3/72NxITE3n++efLNIENGTKEuXPncv/993PzzTeTmJjIiy++SFhYWKkRUmDWACxbtowFCxYQFhaGr68v7dq1K3N9JycnXn31VUaNGsWQIUP4xz/+QV5eHq+99hrp6em88sorVf5MZ1NUVMQ333xTZru3tzeDBg3imWee4amnnuLOO+/ktttuIy0tjRdeeAEPDw+ee+45wAwbDz74IH/7299o06YNbm5uLFmyhM2bN9tqN95//32WLFnCddddR/PmzcnNzbVNm3DVVVedtYxvvvkm+/btY/To0SxatIjhw4cTEhJCamoqixcv5uOPP2b27Nl07dqViy66iHbt2vHoo49SWFhIQEAA3333Xbmj587ltttuY+LEidx2223k5eWV6QvVr18/7r33Xu6++27Wr1/PpZdeire3N8nJyfzxxx906dKF++67jx9++IFp06YxbNgwWrZsiWEYzJ07l/T0dK6++uoql0suYA7tgi1iZxWNAuvUqVO5x69atcqIiYkxvLy8jODgYGPs2LHGxo0by4xeqmgU2HXXXVfmnJdddtlZRy+VmDlzptGuXTvD3d3daNmypTFlyhRjxowZZUbVVOU6K1euNC6++GLD3d3dCA0NNR577DHjgw8+qNQosNNNmDDBAMqMSDIMc7TSmDFjjCZNmhheXl7GJZdcYqxYsaJMeSozCswwzNFnU6ZMMSIiIgw3Nzeja9euxoIFC8r9fK+88orRokULw93d3ejQoYPx4Ycflvu7iYuLM/r162d4eXmVGk1W3ugkwzCMefPmGX369DE8PDwMb29v48orrzRWrlxZ6piS6xw9erTU9opGQp3prrvuMoByH5GRkbbjPvroI6Nr166Gm5ub4e/vb9xwww3G1q1bbfsPHz5sjB492mjfvr3h7e1t+Pj4GF27djXeeusto7Cw0DAMc8TU8OHDjcjISMPd3d1o3Lixcdlllxnz588/axlLFBYWGp9++qkxYMAAIzAw0HBxcTGCg4ONQYMG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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "history = fit(X_train,y_train,X_test,y_test)\n",
    "\n",
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='validation')\n",
    "\n",
    "plt.title(\"Train and Validation Loss Curves\")\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally, we can see the performance of the model in the following graph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(y_test, label='test real')\n",
    "plt.plot(range(200,495), model.predict(X_test[200:], verbose=0).flatten(), label='test predict')\n",
    "plt.title(\"Real test vs Predicted test\")\n",
    "plt.xlabel(\"Time(15 min)\")\n",
    "plt.ylabel(\"Load\")\n",
    "plt.legend(loc=\"upper right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance gains <a class=\"anchor\" id=\"t33\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As discussed earlier, all 4 bottlenecks were solved by migrating to the kdb+/q environment taking advantage of PyKX. Overall, the final picture looks like this:\n",
    "\n",
    "\n",
    "|        ¬† ¬† ¬† ¬† ¬† | Pandas Time ¬† ¬†  |  PyKX Time  ¬† ¬† ¬†|\n",
    "| ---------------- | ---------------- | ---------------- |\n",
    "| Cleaning Weather | 247 ms ¬± 10.4 ms | 26.7 ms ¬± 683 ¬µs |\n",
    "| Cleaning Traffic | 25.5 s ¬± 1.29 s ¬†| 1.65 s ¬± 248 ms ¬†|\n",
    "| Join Final Table | 7.1 s ¬± 168 ms ¬† | 686 ms ¬± 24.1 ms |\n",
    "| Model Ingestion Preprocess |  3.2 s ¬± 54.2 ms  | 178 ms ¬± 8.01 ms|\n",
    "\n",
    "So we got a 10x decrease across the board. We went from a total of 36 seconds spent on these bottlenecks down to just shy of 4 seconds, which is really impressive on itself. If a migration like this one was on the horizon, we would strongly suggest profiling the code to see where it struggles the most and try to think of a way to migrate those parts alone to PyKX. Then, as a second step, we recommend to port the rest of the code to PyKX in order to circumvent the overhead that moving data between memory spaces inherently adds to the process."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    <b> üîç You can find on Github the resulting <a href=\"https://github.com/hablapps/AllRoadsLeadToPyKX/blob/Python-Version-Pre/AllRoadsLeadToPyKX.md\">PyKX-enhanced pythonic code</a>. </b> (TBD: fix url)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pykx.q migration <a class=\"anchor\" id=\"t4\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "After gaining proficiency in the q language, the team progressively shifted towards utilizing `kx.q()` extensively, drawn by its brevity. Yet, this approach introduced a level of monotony due to the requirement of employing strings. As a remedy, a decision was made to transition into a q environment. However, as highlighted in the previous chapter, certain Python code proved challenging to migrate to q. Consequently, the team chose to remain within PyKX, this time operating within a q environment.\n",
    "\n",
    "pykx.q facilitates the execution of Python code within a q environment, thereby presenting new avenues for addressing existing codebases. This flexibility enables the incorporation and utilization of Python libraries, both those installed on the system and those available as .py files.\n",
    "\n",
    "In our scenario, we harness both of these options. We emphasize the potential provided by these opportunities to integrate Python code within pykx.q, while also providing a link to the project's [q script]() for readers seeking further insights.\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "    <b> üîç You can find on Github the resulting <a href=\"https://github.com/hablapps/AllRoadsLeadToPyKX/blob/Python-Version-Pre/AllRoadsLeadToPyKX.md\">PyKX-enhanced kdb+/q code</a>. (TBD: fix url)</b>\n",
    "</div>\n",
    "\n",
    "Our initial step involves executing the `haversine_vector` function for calculating coordinate distances. Given its unavailability in q, we opted to employ pykx.q to seamlessly integrate this library directly into our q code. This was achieved through the following lines:\n",
    "\n",
    "```q\n",
    ".pykx.pyexec\"from haversine import haversine_vector, Unit\";\n",
    "```\n",
    "<div class=\"alert alert-block alert-success\" style=\"background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 5px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100\">\n",
    "<div class=\"alert-header custom-card-header\" style=\"background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px; font-size: 115%;\">\n",
    "<i class=\"fa fa-commenting\" aria-hidden=\"true\" style=\"color:#00b100\"></i>&nbsp;&nbsp;&nbsp;MORE INFO: <a href=\"https://code.kx.com/pykx/1.6/user-guide/advanced/running_under_q.html\">Python and Q Context</a> \n",
    "</div>\n",
    "<div style=\"background-color: #e5ffdf70; ¬†padding: 40px; padding-top:30px; padding-bottom:20px\">\n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> In PyKX.q, the python and q contexts coexists too. The utilization of <code>.pykx.pyexec</code> permits the execution of Python code within the q environment. When you're in the q context, you can work with python objects using the resources provided by pykx.q.These  incluede indexing, function declaration, and library importation. However, consistent with the recommendation of the previous chapter, it's generally better to stick with q objects for as long as you can.</p>\n",
    "    \n",
    "<p style=\"color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5\"> Objects from the Python memory can be retrieved using <code>pykx.get</code> and transmitted using <code>pykx.set</code>. The Python data type to be employed in the transformation can be specified using <code>.pykx.setdefault</code>.</p>\n",
    "</div>\n",
    "</div>\n",
    "\n",
    "This function expects two Pandas DataFrames as input, so we need to change the default conversion type from Numpy to Pandas:\n",
    "\n",
    "```q\n",
    ".pykx.setdefault\"pd\";\n",
    "```\n",
    "\n",
    "Having done this, we can \"move\" our input variables to the Python memory space using `.pykx.set`\n",
    "\n",
    "```q\n",
    ".pykx.set[`a;`longitude`latitude#a];\n",
    ".pykx.set[`b;`longitude`latitude#b];\n",
    "```\n",
    "\n",
    "And finally execute our function:\n",
    "\n",
    "```q\n",
    "(.pykx.eval\"haversine_vector(a, b, Unit.KILOMETERS, comb=True)\")`\n",
    "```\n",
    "\n",
    "Notice the backtick at the end, this is for converting back to a q type.\n",
    "\n",
    "\n",
    "The other way we can run Python code is to load a .py (renamed to .p) file using `\\l`. This could be done as follows:\n",
    "\n",
    "```q\n",
    "system\"l kerasmodel.p\";\n",
    "```\n",
    "\n",
    "Here we have included the functions `fit` and `predict` previously defined in last section. We can load them and use them like this:\n",
    "\n",
    "```q\n",
    "modelfit:.pykx.get`fit;\n",
    "modelfit[train[0][3403];train[1][3403];test[0][3403];test[1][3403]];\n",
    "modelpredict:.pykx.get`predict;\n",
    "res:modelpredict[train[0][3403]];\n",
    "```\n",
    "\n",
    "In terms of performance, we noticed a slight decrease in execution time comparing to using PyKX:\n",
    "\n",
    "|        ¬† ¬† ¬† ¬† ¬†           | Pandas Time ¬† ¬†  |  PyKX Time  ¬† ¬† ¬†|  q Time          |\n",
    "| -------------------------- | ---------------- | ---------------- | ---------------- |\n",
    "| Cleaning Weather           | 247 ms ¬± 10.4 ms | 26.7 ms ¬± 683 ¬µs | 22.3 ms ¬± 224 ¬µs |\n",
    "| Cleaning Traffic           | 25.5 s ¬± 1.29 s ¬†| 1.65 s ¬± 248 ms ¬†| 1.627 s ¬± 124 ms |\n",
    "| Join Final Table           | 7.1 s ¬± 168 ms ¬† | 686 ms ¬± 24.1 ms | 543 ms ¬± 10.1 ms |\n",
    "| Model Ingestion Preprocess |  3.2 s ¬± 54.2 ms | 178 ms ¬± 8.01 ms | 153 ms ¬± 3.12 ms |\n",
    "\n",
    "These little timing shifts might happen because of changes in memory or processor activity, but it's not really noticeable as far as we could see.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final thoughts v1 <a class=\"anchor\" id=\"t5\"></a>\n",
    "\n",
    "Ultimately, the project yielded remarkable success. We effectively transformed a previously disorganized and performance-constrained codebase into a streamlined, competitive solution, enriched by the capabilities of kdb+/q. PyKX's design is conducive to harmonious coexistence between more seasoned professionals and newcomers in the realm of kdb+/q development. This fosters collaborative synergy among team members with varying levels of expertise. The diverse integration levels of PyKX, combined with their compatibility, make it an accessible entry point to kdb+/q for less-experienced colleagues, thereby enhancing our team's collective skill set.\n",
    "\n",
    "The pykx.q library allows, as we have discussed earlier, to use existing Python codebases. This feature is really useful, specially when dealing with code migrations from Python. Through our experience, we identified challenges in aligning Python input shapes with their counterparts converted from q. After using the `.pykx.set` function for conversion to Python, we often needed to manipulate these transformed objects within the Python environment or modify the default conversion type to match the expected input format of Python functions. Once that was dealt with, the experience using this library was really nice and technically impressive.\n",
    "\n",
    "Since the data we needed to transfer back and forth between memory spaces was not that big (we were cautious this was the case) we observed no perceptible loss in performance. Instead, we achieved a significant improvement compared to Pandas.\n",
    "\n",
    "Overall we would rate both PyKX libraries highly since it enables users to reuse existing code, significantly reducing the time required for migrations between these two languages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final thoughts v2 <a class=\"anchor\" id=\"t5\"></a>\n",
    "Overall this project turned out smoother than expected thanks to PyKX. It allowed us to get a foothold on the kdb+/q ecosystem before making the full transition to using q code, which on itself it's impressive. We achieved our goals of reducing execution time as we saw throughout this post and learned a lot about the kdb+/q ecosystem and its technologies.\n",
    "\n",
    "It wasn't all smooth and sail though. We found a couple of limitations that we thought may save us some time, but ended up as dead ends for our use case. One of them was the Pandas API. As far as we can see, the main idea of it is to apply operations on PyKX objects (mainly tables) in the same way one would if it were using Pandas, so in an ideal world, the transition from Pandas to PyKX would be as simple as importing PyKX, enabling a flag and getting the input tables as PyKX objects. However, since we relied on operation such as `group_by` and `melt`, it ended up being unreasonable to migrate using this API since this operations were not yet implemented and we would have to manually code them, which would take a long time on itself. However, we understand that this feature is still on beta and we look forward to future improvements in this regard since it would make migrations like this one much simpler once it becomes a drop-in replacement for Pandas calls.\n",
    "\n",
    "Regarding the migration to q, it was quite frustrating for us to not be able to use Jupyter notebooks, since those rely on [`embedPy`](https://github.com/KxSystems/embedPy), which is very similar to pykx.q, but incompatible notheless. If you try to import pykx.q inside a q Jupyter notebook, you will get a segmentation fault message stopping you from getting any further. We contacted KX about this and they mentioned that migrating that part to pykx.q it's high on their priority list, so it may work by the time you read this post. If that's the case, let us know!\n",
    "\n",
    "Another limitation we found was to do with the way PyKX handled the conversion of matrices from q to Python. Let's look at an example:\n",
    "\n",
    "```python\n",
    "X_train, y_train = np.array(data[0][0][station_id].py()), np.array(data[0][1][station_id].py())\n",
    "```\n",
    "\n",
    "Here, we convert a matrix and a list to Python to later use it within our LTSM model. Ideally we would do something like this to bring it to Python as a Numpy object:\n",
    "\n",
    "```python\n",
    "X_train, y_train = data[0][0][station_id].np(), data[0][1][station_id].np()\n",
    "```\n",
    "\n",
    "But this did not return the desired shape when it came to the matrix (`X_train`), so we had to tinker around until we found another solution: converting to Python with `.py()` retuned a list of lists and using `np.array()` on it got us what we wanted. Converting with `.np()` would have been the better solution since it would be faster, but we had to do it our own way. Specifically, the execution time would be reduced from around 570 milliseconds to roughly 141 microseconds, which we can't simply ignore given our focus on performance.\n",
    "\n",
    "With the experience we gained, if we had to do everything from scratch once again we would probably follow these steps as a guide:\n",
    "\n",
    "1. Profile the original code to locate bottlenecks. This allows us to put the focus on the heavier parts of our process.\n",
    "2. Once located, migrate those parts alone to PyKX. You **will** take a performance hit when moving data from memory spaces, but it's important to know the potential gains that are possible, so measure the migrated bottlenecks alone to see the difference.\n",
    "3. If your tables are not that large, you may be able to get away with it as-is, not needing to do a full migration. If that's the case then great! You are done. However, if you notice that the performance hit when moving data between memory spaces is actually hindering the process, consider a full migration to PyKX.\n",
    "4. If a full migration to PyKX is needed, then first take a look at the Pandas API. By the time you read this, it may have already improved compatibility and could be a drop-in replacement for Pandas. If it's not the case you will need to familiarise yourself with PyKX and get your hands dirty as we had to.\n",
    "\n",
    "We hope this post could serve as a guide of sorts for those that want to familiarise themselves with PyKX and the kdb+/q ecosystem since it brings a lot to the table. In the end we were able to achieve a full 1:1 migration to PyKX and even to q with pykx.q, which is impressive given the differences between the languages and their philosophy all while notably cutting execution time.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bibliography <a class=\"anchor\" id=\"t5\"></a>\n",
    "\n",
    "* *Vidas M, Tubiƒá V, Ivanoviƒá I, Subotiƒá M. Sustainability (Basel) 2022; 14(9): e4985, http://dx.doi.org/10.3390/su14094985*  \n",
    "* *Y. Yao et al., \"Analyzing the Effects of Rainfall on Urban Traffic-Congestion Bottlenecks,\" in IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing, vol. 13, pp. 504-512, 2020, http://dx.doi.org/10.1109/JSTARS.2020.2966591*  \n",
    "* *Essien, A., Petrounias, I., Sampaio, P., & Sampaio, S. (2018). The Impact of Rainfall and Temperature on Peak and Off-Peak Urban Traffic. In Database and Expert Systems Applications : 28th International Conference, DEXA 2018, Regensburg, Germany. (pp. 399-407). (Lecture Notes in Computer Science). Springer Nature. https://doi.org/10.1007/978-3-319-98812-2_36*  \n",
    "* *A. Morrison and N. Crone, Accelerating Python Workflows using PyKX, June 2023, KX Developers blog, https://kx.com/blog/accelerating-python-workflows-using-pykx/*\n",
    "* *Reuben Taylor. An Introduction to PyKX https://kx.com/videos/an-introduction-to-pykx/ June, 2023*\n",
    "* *Paul Walsh PyKX Boosts Trade Analytics https://www.treliant.com/knowledge-center/pykx-boosts-trade-analytics/ June 26, 2023*\n",
    "\n",
    "(TBD: new refs - need formatting .. )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
